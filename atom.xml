<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>My Lady Shen</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-02-18T02:20:08.506Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>YY Huang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>VHDL第十章数字系统设计方法</title>
    <link href="http://example.com/2023/02/18/VHDL%E7%AC%AC%E5%8D%81%E7%AB%A0%E6%95%B0%E5%AD%97%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95/"/>
    <id>http://example.com/2023/02/18/VHDL%E7%AC%AC%E5%8D%81%E7%AB%A0%E6%95%B0%E5%AD%97%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95/</id>
    <published>2023-02-18T02:19:48.000Z</published>
    <updated>2023-02-18T02:20:08.506Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="数字系统的层次化结构"><a href="#数字系统的层次化结构" class="headerlink" title="数字系统的层次化结构"></a>数字系统的层次化结构</h1><p>可以分为四个层次：</p><ol><li>性能级</li><li>功能级</li><li>结构级</li><li>物理级</li></ol><ul><li>系统设计：将<strong>性能级</strong>的说明映射为<strong>功能级</strong>的设计过程</li><li>逻辑设计：将<strong>功能级</strong>的描述转换为<strong>结构（逻辑</strong>）的过程</li><li>物理设计：将<strong>逻辑结构</strong>转换为<strong>物理级</strong>（电路）的实现<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202302172207405.png"                      alt="image.png"                ><br>采用自顶向下的设计方法<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202302172210957.png"                      alt="image.png"                ></li></ul><h1 id="模块技术（系统设计）"><a href="#模块技术（系统设计）" class="headerlink" title="模块技术（系统设计）"></a>模块技术（系统设计）</h1><p>将系统总的功能分解为若干个子功能。划分系统的模块结构，需要考虑以下几个方面：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202302172342992.png"                      alt="image.png"                ><br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202302172345986.png"                      alt="image.png"                ></p><h1 id="串行数据接收器"><a href="#串行数据接收器" class="headerlink" title="串行数据接收器"></a>串行数据接收器</h1><p>#值得一看<br><a class="link"   href="https://www.bilibili.com/video/BV15G4y137AT" >对应的课程（点击跳转）<i class="fa-solid fa-up-right-from-square"></i></a></p><p>性能级设计：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202302172352790.png"                      alt="image.png"                ><br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202302172353064.png"                      alt="image.png"                ><br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202302180900306.png"                      alt="image.png"                ><br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202302180902133.png"                      alt="image.png"                ><br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202302180903086.png"                      alt="image.png"                ><br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202302180903521.png"                      alt="image.png"                ><br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202302180955991.png"                      alt="image.png"                ><br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202302180955831.png"                      alt="image.png"                ></p><h1 id="迭代技术"><a href="#迭代技术" class="headerlink" title="迭代技术"></a>迭代技术</h1><p>简单的逻辑子网络代替复杂的组合逻辑网络，实现要求的处理功能。</p><ul><li>时间迭代</li><li>空间迭代</li><li>两者混合</li></ul><h2 id="空间迭代网络的基本模型"><a href="#空间迭代网络的基本模型" class="headerlink" title="空间迭代网络的基本模型"></a>空间迭代网络的基本模型</h2><p>结构高度重复的组合逻辑网络。利用结构相同的子网络作为单元电路。</p><p><strong>单元电路的输入</strong>：</p><ul><li>来自外部的一次输入</li><li>来自串接链路前级的二次输入<br><strong>单元电路的输出：</strong></li><li>输出到外部的一次输出</li><li>输出到串接链路次级的二次输出</li></ul><p><strong>二次输入和二次输出是建立子网络之间联系的纽带。</strong><br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202302181010791.png"                      alt="image.png"                ></p><h2 id="时间迭代网络的基本模型"><a href="#时间迭代网络的基本模型" class="headerlink" title="时间迭代网络的基本模型"></a>时间迭代网络的基本模型</h2><p>子网络在时钟控制下，接收来自信息寄存器A，．．．E通过移位的串行输入，在子网络内作串行处理后，串行输出到结果寄存器R1 ，…Rn  。<br>    暂存单元C用于寄存子网络的二次输出，以便在时钟的下一个节拍作为子网络的二次输入参加运算和操作。暂存单元C对应空间迭代方式中的边界输入。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202302181010235.png"                      alt="image.png"                ></p><h1 id="4位二进制加法器迭代网络设计"><a href="#4位二进制加法器迭代网络设计" class="headerlink" title="4位二进制加法器迭代网络设计"></a>4位二进制加法器迭代网络设计</h1><p>分析：根据二进制数相加的运算规则可知，任意一位的和Si等于被加数<br>      Ai、Bi及来自低位的进位Ci－1，而其进位Ci则为相加后的溢出值。<br>实现1：根据这个结构特性，选用全加器FA作为子网络的单元电路，以低<br>       位向高位的进位值作为子网络的二次输入&#x2F;输出，通过空间迭代法构<br>       成的四位并行加法器如下图。通常最低位的进位输入Cin置为0，而<br>       最高位的Cout作为溢出标志。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202302181010910.png"                      alt="image.png"                ><br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202302181010087.png"                      alt="image.png"                ><br>一个空间，一个时间迭代</p><h2 id="二维迭代技术"><a href="#二维迭代技术" class="headerlink" title="二维迭代技术"></a>二维迭代技术</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202302181012098.png"                      alt="image.png"                ></p><h1 id="乘法器设计"><a href="#乘法器设计" class="headerlink" title="乘法器设计"></a>乘法器设计</h1><ol><li>性能级<br>四位数字乘法器</li><li>结构级设计<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202302181013464.png"                      alt="image.png"                ></li></ol><p>空间迭代：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202302181014166.png"                      alt="image.png"                ><br>时间迭代——部分积左移累加算法<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202302181014046.png"                      alt="image.png"                ><br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202302181014703.png"                      alt="image.png"                ></p><p>部分和右移与部分积累加算法<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202302181015911.png"                      alt="image.png"                ></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202302181015217.png"                      alt="image.png"                ></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="VHDL 学习" scheme="http://example.com/tags/VHDL-%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>VHDL第九章设计与优化</title>
    <link href="http://example.com/2023/02/18/VHDL%E7%AC%AC%E4%B9%9D%E7%AB%A0%E8%AE%BE%E8%AE%A1%E4%B8%8E%E4%BC%98%E5%8C%96/"/>
    <id>http://example.com/2023/02/18/VHDL%E7%AC%AC%E4%B9%9D%E7%AB%A0%E8%AE%BE%E8%AE%A1%E4%B8%8E%E4%BC%98%E5%8C%96/</id>
    <published>2023-02-18T02:18:11.000Z</published>
    <updated>2023-02-18T02:18:59.458Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>重要思想：<br>先设计模块电路后设计代码，设计者须<strong>明确每一段代码生成的电路</strong>，否则优化无从谈起。</p><p>以设计全加器为例<br>逻辑函数：<br>          Si&#x3D;Ai⊕Bi⊕Ci-1<br>　　   Ci&#x3D;AiBi+Ci-1(Ai⊕Bi)</p><div class="highlight-container" data-rel="Vhdl"><figure class="iseeu highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">tmp &lt;= Ai  <span class="keyword">xor</span>  Bi ;</span><br><span class="line">Si    &lt;= tmp  <span class="keyword">xor</span>  Ci-<span class="number">1</span> ;</span><br><span class="line">Ci    &lt;= (Ai <span class="keyword">and</span> Bi) <span class="keyword">or</span> (Ci-<span class="number">1</span>  <span class="keyword">and</span>  tmp) ; </span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202302171152480.png"                      alt="image.png"                ><br>当上述设计的全加器，若Ci和Si做同或运算<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202302171153582.png"                      alt="image.png"                ><br>波形<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202302171153202.png"                      alt="image.png"                ><br>存在竞争与冒险：<br>    Si&#x3D;Ai⊕Bi⊕Ci-1<br>   将：Ci&#x3D;AiBi+Ci-1(Ai⊕Bi)<br>   改为： Ci&#x3D;AiBi + BiCi-1 + AiCi-1</p><div class="highlight-container" data-rel="Vhdl"><figure class="iseeu highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Si &lt;= Ai <span class="keyword">xor</span> Bi  <span class="keyword">xor</span> Ci-<span class="number">1</span>；</span><br><span class="line">   Ci &lt;=（Ai <span class="keyword">and</span> Bi）<span class="keyword">or</span>（Bi <span class="keyword">and</span> Ci-<span class="number">1</span>）<span class="keyword">or</span>（Ai <span class="keyword">and</span> Ci-<span class="number">1</span>）；</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202302171154995.png"                      alt="image.png"                ></p><p>严格来说，vhdl代码不是程序。VHDL既称为硬件描述语言，则VHDL主要用于设计描述硬线电路以及对设计的抽象仿真。那么，对于一个数字系统设计者来说，能够将所设计的代码映射为相应的硬线电路是必须具备的能力。</p><h1 id="寄存器的引入方法"><a href="#寄存器的引入方法" class="headerlink" title="寄存器的引入方法"></a>寄存器的引入方法</h1><h2 id="触发器的引入"><a href="#触发器的引入" class="headerlink" title="触发器的引入"></a>触发器的引入</h2><p>两种引入方法：都是条件涵盖不完整的语句</p><ul><li><strong>条件涵盖不完整的if语句会产生触发器</strong></li><li><strong>条件涵盖不完整的case语句会产生触发器</strong></li></ul><div class="highlight-container" data-rel="Vhdl"><figure class="iseeu highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ENTITY</span> DFF <span class="keyword">IS</span></span><br><span class="line"><span class="keyword">PORT</span>(clk:<span class="keyword">in</span> <span class="built_in">std_logic</span>;</span><br><span class="line">            y:<span class="keyword">out</span> <span class="built_in">std_logic</span>);</span><br><span class="line"><span class="keyword">END</span> DFF;</span><br><span class="line"><span class="keyword">ARCHITECTURE</span> BEHAV <span class="keyword">OF</span> DFF <span class="keyword">IS</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--------------------------------------------------</span></span><br><span class="line"><span class="keyword">PROCESS</span>(clk)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">      <span class="keyword">IF</span> (clk’event <span class="keyword">AND</span> clk=‘<span class="number">1</span>’) <span class="keyword">THEN</span></span><br><span class="line">           y&lt;=a;</span><br><span class="line">      <span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">PROCESS</span>;</span><br><span class="line"><span class="comment">---------------------------------------------------</span></span><br><span class="line"><span class="keyword">PROCESS</span>(clk)</span><br><span class="line"> <span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">IF</span> (rising_edge(clk)) <span class="keyword">THEN</span>    y&lt;=a;</span><br><span class="line">    <span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">PROCESS</span>;</span><br><span class="line"><span class="comment">-- 此时的clk必须是std_logic类型</span></span><br><span class="line"><span class="comment">---------------------------------------------------</span></span><br><span class="line"><span class="keyword">PROCESS</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">      <span class="keyword">WAIT</span> <span class="keyword">UNTIL</span> clk’evnt ANDclk=‘<span class="number">1</span>’;</span><br><span class="line">      y&lt;=a;</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">PROCESS</span>;</span><br><span class="line"><span class="comment">--： Wait语句必须放在进程的首部或尾部，并且一个进程中的wait语句不能超过一个</span></span><br><span class="line"><span class="comment">---------------------------------------------------</span></span><br><span class="line"><span class="keyword">PROCESS</span>(clk)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">     <span class="keyword">IF</span> clk=‘<span class="number">1</span>’ <span class="keyword">THEN</span></span><br><span class="line">          y&lt;=a;</span><br><span class="line">     <span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">PROCESS</span>;</span><br><span class="line"><span class="comment">-- 因为要启动进程必须要clk发生跳变，且仅当clk=‘1’时赋值才有效。所以综合后是一个D触发器 </span></span><br></pre></td></tr></table></figure></div><p>上面的是使用条件涵盖不完整的if语句形成触发器，当if语句涵盖完整时，综合后形成一般的组合逻辑。</p><ul><li>当if 语句条件涵盖完整时，产生一个2选1的多路选择器。<div class="highlight-container" data-rel="Vhdl"><figure class="iseeu highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">PROCESS</span>( state, inA, inB)</span><br><span class="line">   <span class="keyword">BEGIN</span></span><br><span class="line">         <span class="keyword">CASE</span> state <span class="keyword">IS</span> </span><br><span class="line">               <span class="keyword">WHEN</span> s0 =&gt;</span><br><span class="line">                      outA&lt;=‘<span class="number">1</span>’; <span class="comment">--没有对outB赋值，所以outB保持原值</span></span><br><span class="line">               <span class="keyword">WHEN</span>  s1 =&gt;</span><br><span class="line">                      outA&lt;=inB ;    </span><br><span class="line">                      outB&lt;=‘<span class="number">1</span>’;</span><br><span class="line">               <span class="keyword">WHEN</span> s2 =&gt;</span><br><span class="line">                      outB&lt;=inA;    <span class="comment">--没有对outA赋值，所以outA保持原值</span></span><br><span class="line">         <span class="keyword">END</span> <span class="keyword">CASE</span>;</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">PROCESS</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div></li></ul><h2 id="锁存器的引入"><a href="#锁存器的引入" class="headerlink" title="锁存器的引入"></a>锁存器的引入</h2><ul><li>条件涵盖不完整的if语句会产生锁存器</li><li>case语句中条件不完全覆盖会产生锁存器<br>实例：<div class="highlight-container" data-rel="Vhdl"><figure class="iseeu highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ENTITY</span> rigister <span class="keyword">IS</span></span><br><span class="line"> <span class="keyword">PORT</span>(a,clk:<span class="keyword">in</span> <span class="built_in">std_logic</span>;</span><br><span class="line">             y:<span class="keyword">out</span> <span class="built_in">std_logic</span>);</span><br><span class="line"><span class="keyword">END</span> DFF;</span><br><span class="line"><span class="keyword">ARCHITECTURE</span> BEHAV <span class="keyword">OF</span> rigister <span class="keyword">IS</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="comment">----------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">PROCESS</span>(clk,a)</span><br><span class="line">  <span class="keyword">BEGIN</span></span><br><span class="line">     <span class="keyword">IF</span> clk=‘<span class="number">1</span>’ <span class="keyword">THEN</span></span><br><span class="line">     y&lt;=a;</span><br><span class="line">     <span class="keyword">ELSE</span>             <span class="comment">--VHDL默认保持先前的值，故引入高电平锁存器</span></span><br><span class="line">     <span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line"> <span class="keyword">END</span> <span class="keyword">PROCESS</span>;</span><br><span class="line"><span class="comment">-----------------------------------------------</span></span><br><span class="line"><span class="keyword">PROCESS</span>(clk,a)</span><br><span class="line">  <span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">IF</span> clk=‘<span class="number">1</span>’ <span class="keyword">THEN</span></span><br><span class="line">     y&lt;=a;</span><br><span class="line">             <span class="comment">--省去了ELSE分支，表示分支y值不发生跳变，同样引入高电平锁存器</span></span><br><span class="line">    <span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line"> <span class="keyword">END</span> <span class="keyword">PROCESS</span>;</span><br><span class="line"><span class="comment">-----------------------------------------------</span></span><br><span class="line"><span class="keyword">PROCESS</span>(clk,a)</span><br><span class="line">  <span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">IF</span> clk=‘<span class="number">0</span>’ <span class="keyword">THEN</span>        <span class="comment">--引入低电平锁存器</span></span><br><span class="line">     y&lt;=a;</span><br><span class="line">    <span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">PROCESS</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div></li></ul><p>case语句</p><div class="highlight-container" data-rel="Vhdl"><figure class="iseeu highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ENTITY</span> rigister <span class="keyword">IS</span></span><br><span class="line">      <span class="keyword">PORT</span>(a,b:<span class="keyword">in</span> <span class="built_in">std_logic</span>;</span><br><span class="line">                 sel:<span class="keyword">in</span> <span class="built_in">std_logic_vector</span>(<span class="number">1</span> <span class="keyword">downto</span> <span class="number">0</span>);</span><br><span class="line">                 y:<span class="keyword">out</span> <span class="built_in">std_logic</span>);</span><br><span class="line"><span class="keyword">END</span> DFF;</span><br><span class="line"><span class="keyword">ARCHITECTURE</span> BEHAV <span class="keyword">OF</span> rigister <span class="keyword">IS</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="comment">------------------------------------</span></span><br><span class="line"><span class="keyword">PROCESS</span>(sel,a,b)</span><br><span class="line"> <span class="keyword">BEGIN</span></span><br><span class="line">   <span class="keyword">CASE</span>   sel   <span class="keyword">IS</span></span><br><span class="line">      <span class="keyword">WHEN</span>   “<span class="number">00</span>”   =&gt; y&lt;=a;</span><br><span class="line">      <span class="keyword">WHEN</span>    “<span class="number">01</span>”  =&gt; y&lt;=a;</span><br><span class="line">      <span class="keyword">WHEN</span>   <span class="keyword">OTHERS</span>  =&gt;  <span class="keyword">NULL</span>;</span><br><span class="line">   <span class="keyword">END</span> <span class="keyword">CASE</span>;</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">PROCESS</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p>触发器和锁存器的区别<br>#值得一看<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202302171408469.png"                      alt="image.png"                ><br>process中启动条件<br>在触发器中只有clk<br>在锁存器中有 clk 和其他信号，持续的时间，仔细看图</p><h2 id="需要注意的问题"><a href="#需要注意的问题" class="headerlink" title="需要注意的问题"></a>需要注意的问题</h2><p>例1</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202302171415459.png"                      alt="image.png"                ><br>在MAXPLUS中，一个进程中只能引入一个边沿检测的语句。<br>在QUARTUS中便不会有这种错误。</p><hr><p>例2<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202302171420276.png"                      alt="image.png"                ><br>将用于产生寄存器的信号或变量赋值语句放在了ELSE条件分支上。<br>       这种赋值方式<strong>相当于检测如果没有时钟信号，则赋新值</strong>。不可能有这样的硬件电路与之对应。</p><p>例3<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202302171423805.png"                      alt="image.png"                ></p><p>例4</p><div class="highlight-container" data-rel="Vhdl"><figure class="iseeu highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>  <span class="keyword">not</span> ( clock’event <span class="keyword">and</span> clock=‘<span class="number">1</span>’) <span class="keyword">then</span>   <span class="comment">--错误</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p>原因：将边沿表达式当成了操作数</p><h2 id="注意的点"><a href="#注意的点" class="headerlink" title="注意的点"></a>注意的点</h2><ul><li>在引入寄存器时，一般情况下采用<strong>异步复位</strong>的方式</li><li>寄存器中，复位的优先级一般要高于置位</li><li>在引入时钟具有使能作用的寄存器时，宜采用嵌套的if语句来描述</li><li>注意将时序进程和组合进程分开描述</li></ul><hr><p><strong>具有时钟门控的触发器引入</strong>：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202302171429820.png"                      alt="image.png"                ><br>改为如下这种<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202302171429255.png"                      alt="image.png"                ></p><hr><p>同步复位&#x2F;置位功能引入：</p><div class="highlight-container" data-rel="Vhdl"><figure class="iseeu highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">process</span>(clk)</span><br><span class="line"><span class="keyword">begin</span> </span><br><span class="line">    <span class="keyword">if</span>  clk’event <span class="keyword">and</span> clk=‘<span class="number">1</span>’ <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">if</span>  set=‘<span class="number">1</span>’  <span class="keyword">then</span> </span><br><span class="line">             y&lt;=‘<span class="number">1</span>’;    </span><br><span class="line">             <span class="comment">--注意，输入‘1’（或true）才能引入硬件置位功能</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">             y&lt;=a <span class="keyword">and</span> b;</span><br><span class="line">        <span class="keyword">end</span> <span class="keyword">if</span> ;</span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">process</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p>上面这个为置1</p><div class="highlight-container" data-rel="Vhdl"><figure class="iseeu highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">process</span>(clk，reset，set)</span><br><span class="line"><span class="keyword">begin</span> </span><br><span class="line">     <span class="keyword">if</span> reset=‘<span class="number">1</span>’<span class="keyword">then</span></span><br><span class="line">           y&lt;=‘<span class="number">0</span>’;       <span class="comment">--必须是一个常量值0才能引入硬件复位机制</span></span><br><span class="line">      <span class="keyword">elsif</span>  set=‘<span class="number">1</span>’<span class="keyword">then</span> </span><br><span class="line">           y&lt;=‘<span class="number">1</span>’;       <span class="comment">--必须是一个常量值1才能引入硬件置位机制</span></span><br><span class="line">     <span class="keyword">elsif</span>  rising_edge(clk)  <span class="keyword">then</span></span><br><span class="line">           y&lt;=a <span class="keyword">and</span> b;</span><br><span class="line">     <span class="keyword">end</span> <span class="keyword">if</span> ;</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">process</span>;</span><br></pre></td></tr></table></figure></div><p>复位的<strong>优先级比置位高</strong>，这是符合常规硬件电路结构的。</p><h1 id="避免不必要寄存器的引入"><a href="#避免不必要寄存器的引入" class="headerlink" title="避免不必要寄存器的引入"></a>避免不必要寄存器的引入</h1><p>由于综合在硬件电路中需要一定的空间，为了更快的工作，需要避免不必要的寄存器的引入<br>#值得一看 </p><ol><li>组合逻辑电路中不能存在<strong>边沿触发状态</strong></li><li>IF 语句，CASE语句<strong>涵盖需要完整</strong>。</li><li>如果信号或变量在一个CASE分支有赋值，就必须<strong>在每个分支都有赋值操作</strong>(或者在CASE语句前面有赋值)。</li></ol><p>实例：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202302172029074.png"                      alt="image.png"                ><br>1、在每个case分支都对outA和outB赋值；<br>2、在case语句前面，先对outA和outB赋初值；</p><p>见课本p113-p117(《VHDL数字系统设计》徐向民主编)</p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>基于3位二进制计数器的3个逻辑输出</p><div class="highlight-container" data-rel="Vhdl"><figure class="iseeu highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">library</span> ieee;</span><br><span class="line"><span class="keyword">use</span> ieee.std_logic_1164.<span class="keyword">all</span>;</span><br><span class="line"><span class="keyword">use</span> ieee.std_logic_unsigned.<span class="keyword">all</span>;</span><br><span class="line"><span class="keyword">entity</span> exmp <span class="keyword">is</span></span><br><span class="line">    <span class="keyword">port</span> (  clock, reset : <span class="keyword">in</span> <span class="built_in">std_logic</span> ;</span><br><span class="line">               and_b, or_b, xor_b : <span class="keyword">out</span> <span class="built_in">std_logic</span>) ;</span><br><span class="line"><span class="keyword">end</span> exmp;</span><br><span class="line"><span class="keyword">architecture</span> rtl <span class="keyword">of</span> exmp <span class="keyword">is</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">      <span class="keyword">process</span></span><br><span class="line">         <span class="keyword">variable</span> count: <span class="built_in">std_logic_vector</span>(<span class="number">2</span> <span class="keyword">downto</span> <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">         <span class="keyword">wait</span> <span class="keyword">until</span> clock’event <span class="keyword">and</span> clock=‘<span class="number">1</span>’;</span><br><span class="line">          <span class="keyword">if</span>  reset=‘<span class="number">1</span>’ <span class="keyword">then</span> </span><br><span class="line">              count :=“<span class="number">000</span>”;</span><br><span class="line">          <span class="keyword">else</span> count :=count+<span class="number">1</span>;</span><br><span class="line">          <span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line">          and_b&lt;=count(<span class="number">2</span>) <span class="keyword">and</span> count(<span class="number">1</span>) <span class="keyword">and</span> count(<span class="number">0</span>);</span><br><span class="line">          or_b&lt;=count(<span class="number">2</span>) <span class="keyword">or</span> count(<span class="number">1</span>) <span class="keyword">or</span> count(<span class="number">0</span>);</span><br><span class="line">          xor_b&lt;=count(<span class="number">2</span>) <span class="keyword">xor</span> count(<span class="number">1</span>) <span class="keyword">xor</span> count(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">process</span>;</span><br><span class="line"><span class="keyword">end</span> rtl;       </span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p>综合后的电路结构如图<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202302172032018.png"                      alt="image.png"                ></p><p><strong>结果</strong>：引入了6个D触发器，但输出只依赖于count的计数。<br>由于count作为累加器，已具有存储功能，3个输出变量没有必要利用别的寄存器另加存储。上述例题的问题在于<strong>将3个输出赋值语句放在了同一个具有wait语句的进中</strong>。</p><hr><p><strong>改进</strong>：可将这3个输出赋值语句放在另外一个没有wait或if语句的进程中。使用两个进程，一个进程具有Wait语句，用于产生具有寄存器性质的计数器，另一个只作输出赋值用（<strong>双进程</strong>）<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202302172038406.png"                      alt="image.png"                ><br>综合后的电路结构：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202302172039899.png"                      alt="image.png"                ></p><h1 id="设计与优化的重要概念"><a href="#设计与优化的重要概念" class="headerlink" title="设计与优化的重要概念"></a>设计与优化的重要概念</h1><p>（之前的内容也有涉及到：同步时序电路设计）<br>![[第五章 状态机设计#时钟周期的选取]]</p><ol><li><strong>建立时间</strong>：指在触发器的时钟信号上升沿到来以前，数据稳定不变的时间。如果 建立时间不够，数据将不能正确输入触发器。</li><li><strong>保持时间</strong>：指在触发器的时钟信号上升沿到来以后，数据稳定不变的时间。如果 保持时间不够，数据同样不能正确输入触发器。 </li><li><strong>传播时延</strong>：信号传播路径上所需要的时间<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202302172042700.png"                      alt="image.png"                ></li><li>时钟偏差：一个时钟翻转的到达时间在空间上的差别通常称为时钟偏差。</li><li>时钟抖动：指在芯片的某一个定点上时钟周期发生暂时的变化<br>影响：<img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202302172045650.png"                      alt="image.png"                ></li></ol><h2 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202302172051625.png"                      alt="image.png"                ><br>初步设计：</p><div class="highlight-container" data-rel="Vhdl"><figure class="iseeu highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">pulse:<span class="keyword">process</span>(rst_n,pulse)</span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">   <span class="keyword">if</span>(rst_n=‘<span class="number">0</span>’) <span class="keyword">then</span></span><br><span class="line"> counter &lt;= (<span class="keyword">others</span>=&gt;’<span class="number">0</span>’);</span><br><span class="line">   <span class="keyword">elsif</span>(pulse ‘event <span class="keyword">and</span> pulse = ‘<span class="number">1</span>’)</span><br><span class="line"> counter &lt;= counter + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line">  <span class="keyword">end</span> <span class="keyword">process</span>;</span><br><span class="line">cs:<span class="keyword">process</span>(rst_n,cs_n)</span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">if</span>(rst_n=‘<span class="number">0</span>’) <span class="keyword">then</span></span><br><span class="line">  dout &lt;= <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">elsif</span>(cs_n ‘event <span class="keyword">and</span> cs_n = ‘<span class="number">0</span>’)</span><br><span class="line">   dout &lt;= counter;</span><br><span class="line">  <span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line">   <span class="keyword">end</span> procss;</span><br><span class="line">   </span><br><span class="line"><span class="comment">---- 不同步，当同时出现 一个上升，一个下降呢？</span></span><br></pre></td></tr></table></figure></div><p>但是当脉冲信号PULSE和读片选信号CS_N是<strong>异步信号</strong>,PULSE何时出现上升沿和CS_N何时出现下降沿是不可控。<strong>若两者同时出现</strong>，结果并不唯一。</p><p>How to solve?<br>使用<strong>跨时钟域的同步设计</strong>，将PULSE和CS_N同步于时钟。</p><div class="highlight-container" data-rel="Vhdl"><figure class="iseeu highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">en1:<span class="keyword">process</span>(clk,rst_n,pulse)</span><br><span class="line">   <span class="keyword">begin</span></span><br><span class="line"><span class="keyword">if</span>(rst_n = ‘<span class="number">0</span>’) <span class="keyword">then</span></span><br><span class="line">   preg1 &lt;= ‘<span class="number">1</span>’; preg2 &lt;= ‘<span class="number">1</span>’;</span><br><span class="line"><span class="keyword">elsif</span>(clk ‘event <span class="keyword">and</span> clk=‘<span class="number">1</span>’)</span><br><span class="line">   preg1 &lt;= pulse; preg2 &lt;= preg1;</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line">pos_en &lt;= <span class="keyword">NOT</span> preg2 <span class="keyword">AND</span> preg1;</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">process</span>;</span><br><span class="line">en1:<span class="keyword">process</span>(clk,rst_n,cs_n)</span><br><span class="line">   <span class="keyword">begin</span></span><br><span class="line"><span class="keyword">if</span>(rst_n = ‘<span class="number">0</span>’) <span class="keyword">then</span></span><br><span class="line">   preg1CS &lt;= ‘<span class="number">1</span>’; preg2CS&lt;= ‘<span class="number">1</span>’;</span><br><span class="line"><span class="keyword">elsif</span>(clk ‘event <span class="keyword">and</span> clk=‘<span class="number">1</span>’)</span><br><span class="line">   preg1CS &lt;=cs_n; preg2CS &lt;= preg1CS ;</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line">PosCS_en &lt;= <span class="keyword">NOT</span> preg1CS <span class="keyword">AND</span> preg2CS;</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">process</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><h1 id="跨时钟域信号处理"><a href="#跨时钟域信号处理" class="headerlink" title="跨时钟域信号处理"></a>跨时钟域信号处理</h1><p>如图：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202302172059156.png"                      alt="image.png"                ></p><p>若不规范，将可能得到亚稳态数据。<br>What is it?<br>如果<strong>数据输入不满足建立时间和保持时间</strong>,那么触发器的晶体管就不能被可靠地设置成代表逻辑0或逻辑1的电压。不是确定在高或低电平就是被设到有效水平之前，晶体管就可能停留在一个中间电压，这就叫亚稳态。</p><h2 id="如何进行跨时钟域的信号传输"><a href="#如何进行跨时钟域的信号传输" class="headerlink" title="如何进行跨时钟域的信号传输"></a>如何进行跨时钟域的信号传输</h2><ol><li>同步寄存器链</li><li>时钟同步设计</li><li>专用握手信号</li><li>借助存储器（FIFO结构）</li><li>相位控制</li><li>分割同步模块</li></ol><h3 id="专用握手信号"><a href="#专用握手信号" class="headerlink" title="专用握手信号"></a>专用握手信号</h3><p>（有点类似于三次握手，四次挥手）<br>使用专用控制信号进行状态指示，（req和ack）分别脉冲检测方法进行同步。<br>详细如下：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202302172111632.png"                      alt="image.png"                ></p><p>优点： 可以接受到的数据稳定可靠，避免亚稳态<br>缺点： 消耗时间，不适合高速传输。</p><h3 id="借助存储器（FIFO结构）"><a href="#借助存储器（FIFO结构）" class="headerlink" title="借助存储器（FIFO结构）"></a>借助存储器（FIFO结构）</h3><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202302172113311.png"                      alt="image.png"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202302172113862.png"                      alt="image.png"                ></p><p>重要参数：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202302172113361.png"                      alt="image.png"                ></p><h3 id="相位控制"><a href="#相位控制" class="headerlink" title="相位控制"></a>相位控制</h3><p>如果其中至少一个时钟是在FPGA中内部通过PLL（锁相环）或DLL（延迟锁相环）可控制的，另一个时钟与在PLL或DLL解决方案中那个时钟周期有倍数关系，那么可采用相位匹配来消除冲突。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202302172114928.png"                      alt="image.png"                ><br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202302172114121.png"                      alt="image.png"                ></p><h3 id="分割同步模块"><a href="#分割同步模块" class="headerlink" title="分割同步模块"></a>分割同步模块</h3><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202302172115014.png"                      alt="image.png"                ><br>每个基本模块的时序分析变为一致，因为它是完全同步。<br>时序在其应用到整个同步模块时很容易确定。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="VHDL 学习" scheme="http://example.com/tags/VHDL-%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>VHDL第八章可综合性</title>
    <link href="http://example.com/2023/02/18/VHDL%E7%AC%AC%E5%85%AB%E7%AB%A0%E5%8F%AF%E7%BB%BC%E5%90%88%E6%80%A7/"/>
    <id>http://example.com/2023/02/18/VHDL%E7%AC%AC%E5%85%AB%E7%AB%A0%E5%8F%AF%E7%BB%BC%E5%90%88%E6%80%A7/</id>
    <published>2023-02-18T02:17:49.000Z</published>
    <updated>2023-02-18T02:18:37.929Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="VHDL-语言结构向硬件的映射"><a href="#VHDL-语言结构向硬件的映射" class="headerlink" title="VHDL 语言结构向硬件的映射"></a>VHDL 语言结构向硬件的映射</h1><p>有效的VHDL建模风格是控制综合结果最为有力的手段。<br>不同综合工具对于同样的硬件描述，会得到不同的综合结果。</p><p>VHDL中并不是将所有语句综合，综合的是其中的一部分语句。</p><ol><li>延时描述（after 语句、wait for语句）<strong>将被忽略</strong><br>而综合时间约束则在综合过程中通过综合命令输入。</li><li><strong>支持有限类型</strong><br>有些类型不具备硬件对应物，不可能被综合，如文件类型。<br>通常可综合类型包括位、位矢量、布尔量、整数、枚举类型、数组等。其余像浮点数类型、记录类型等只能得到有限支持，而<strong>时间类型等完全不能被综合</strong></li><li>进程的书写要服从一定的限制<br>在仿真时，VHDL进程可以任意书写。而在综合时，通常要求一个进程内只能有<strong>一个有效时钟</strong>，有的工具还有进一步的限制</li><li>可综合代码应该是同步式的设计<br>推荐使用同步，当然也能使用异步设计，但往往需要进一步的优化或调整。</li></ol><h1 id="VHDL类型"><a href="#VHDL类型" class="headerlink" title="VHDL类型"></a>VHDL类型</h1><p>VHDL中包括的对象有： 常量（constant）、信号（signal）、变量（variable），都必须定义为某种具体的类型。</p><ol><li>可综合数据类型<br> 面向综合的建模都支持这样一些类型：枚举类型、整数、一维数组。<br>比较先进的综合工具现在一般也可以处理二维数组和简单的记录类型。</li></ol><p>（1）枚举类型<br>     枚举类型通过列出所有可能的取值来定义，例如：<br>         type  Boolean  is  (FALSE , TRUE);<br>          type  State_type  is  (HALT,READY,RUN,ERROR);<br>          type  Std_ulogic  is  (‘U’,‘X’,‘0’, ‘1’, ‘Z’, ‘-’);</p><pre><code>以上Std_ulogic的定义实际是对‘0’‘1’等字符进行了重载，由于这个定义已经成为IEEE标准，因此综合时不会产生额外硬件。而对于抽象层次更高的Boolean和 State_type则需要进行状态编码。一般来说，状态编码是把状态值编码为位矢量（如bit_vector），矢量长度是能够表示所有状态的最短位宽。例如，State_type的4个状态值可以分别校编码为“00”，“01”，“10”和“11”。</code></pre><p>（2）整数类型<br>    可综合的整数类型定义总是有界的，例如：<br>    type  My_integer  is  Integer  range 0 to 255;<br>    subtype  Byte_int  is  Integer  range -128 to 127;</p><pre><code>对整数类型进行综合时，综合工具首先将其翻译为位矢量，矢量长度仍取能够满足需要的最短位宽。建议类型定义时明确指出整数的范围，以便于综合工具进行优化。否则大部分综合工具按32位处理。综合后的电路中，整数以矢量形式出现，但通常只能以整个矢量为单位访问，即不能单独访问每一位。</code></pre><p>（3）数组类型<br>    现在的综合工具都能够处理一维数组，例如：<br>    type  Word  is  arry  （31 downto 0)  of   Bit;<br>        type  My_RAM  is  array  (1023 downto  0 )   of   Word;</p><pre><code>    对于Word类型，综合工具通常将其综合为总线。 My_RAM类型实际是二维的，这种用两个一维数组代替一个两维数组是常用的综合建模技巧。现在先进的综合工具如synospys DC可以将其综合为RAM，一般的综合工具至少可以把它综合为寄存器</code></pre><p>（4）记录类型<br>    记录类型在定义复杂数据类型时非常方便，能够把不同数据类型的数据组织在一起统一访问。<br>    但是，EDA工业界对综合工具是否应该支持记录类型还没有统一意见，因此大多数综合工具不提供这种能力或只能把组合了简单数据类型的记录进行综合。</p><ol start="2"><li>可综合子集<br> ieee颁发的<strong>std_logic_1164</strong>，其中定义了<strong>9值数据类型</strong> std_ulogic<br>  ieee颁布的标准<br>   该项标准主要支持以下类型的综合：<br>a) bit ,  boolean , bit_vector<br>b) character , string<br>c) integer<br>d) std_logic , std_ulogic_vector , std_logic ,<br> std_logic_vector<br>e) signed , unsignd</li></ol><h1 id="VHDL的对象"><a href="#VHDL的对象" class="headerlink" title="VHDL的对象"></a>VHDL的对象</h1><p>常量 变量 信号</p><ol><li>常量<br>常量只被计算一次，通过常量引导综合器获得优化结果</li></ol><ol><li><p><strong>用于真值表、ROM等，或者用于信号赋值</strong>，在综合时会形成相应的硬件</p></li><li><p>作为算数运算的一个<strong>操作数</strong>出现，会有特定的优化措施，与硬件不会意义对应。</p></li><li><p><strong>常量在作为条件表达式</strong>的一部分时综合工具会对整个语法结构进行布尔优化。</p></li><li><p><strong>常量传播</strong>。在下面的VHDL代码中，由于数组ROM和ROM（5）的索引都是常量，因此WORD4实际上也成为常数，在进一步优化中，WORD4将作为常量被处理。这就是常量传播。</p><pre><code>  constant ROM : ROM_TYPE := Read(“Rom_file.dat”);  signal WORD4 : Bit_vector (3 downto 0);  begin     WORD4 &lt;= ROM(5)</code></pre></li></ol><ol start="2"><li>变量和信号<br>两者有不同的仿真行为，在综合过程中，会产生不同的结果</li></ol><ol><li><p>一般来说，尽量<strong>使用变量</strong>能够获得比较好的综合结果，因为这样做使得优化的余地较大。但要注意，并不是所有的综合工具都支持变量的综合。</p></li><li><p>使用信号可以较好地<strong>保持综合前后在I&#x2F;O</strong>上的一致性（这时把进程内对信号的读写统称为I&#x2F;O），而且在需要<strong>锁存中间结果</strong>的时候，经常有必要使用信号</p></li></ol><h1 id="初值"><a href="#初值" class="headerlink" title="初值"></a>初值</h1><p>存在三种初值：由<strong>类型或子类型定义可以得到的默认初值</strong>，定义对象时明确指定的初值和进程入口处显示地赋予对象的初值。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202302171019259.png"                      alt="image.png"                ></p><ul><li><p>以上三种初值的前两种只在仿真时有意义,在综合时将被忽略。</p></li><li><p>第三种形式将被综合器处理，形成对应电路</p></li><li><p>在<strong>进程入口处</strong>显示地赋予对象的初值。</p></li></ul><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202302171021583.png"                      alt="image.png"                ></p><ol><li>逻辑运算符<br>逻辑运算符包括<strong>二元逻辑运算符以及NOT运算</strong>，操作数可以是bit 和std_logic等类型的标量或同长度的矢量对象，也可以是 boolean类型的对象。这些运算符综合时直接调用逻辑门单元实现即可，但优化过后，可能被合并或改变</li><li>关系运算符<br>没有统一的方法，利用被比较数的特点进行特定优化</li><li>一元算数运算符<br>一元算术运算符有三个，即 **** +（正），一（负）和abs（取绝对值）。*对前两个运算符，综合工具大都可以用组合逻辑线路实现，如下的例子。abs运算符的处理比较复杂，大部分综合工具尚不能提供支持。</li><li>二元算术运算符<br>特别是高层次综合工具,都能直接把加,减,乘运算综合为相应的电路,部分工具也支持除法运算。mod 和rem运算符通常不被综合工具支持。</li></ol><h1 id="顺序语句"><a href="#顺序语句" class="headerlink" title="顺序语句"></a>顺序语句</h1><ol><li>if语句<br> (1)if语句包含了条件所有可能的取值,称之为<strong>完全if语句</strong>。<br>这时综合器用多路选择器或基本逻辑门的组合来实现电路。用多路选择器实现电路时，if…elsif…else中隐含的优先关系会被消去。<br> (2)if语句条件未包含所有可能出现的情况,称之为<strong>不完全if语句</strong><br>此时有效条件是对某信号的跳变进行检测，并且在条件满足时是对信号进行赋值操作，那么会生成触发器。如果赋值号右边为一复杂表达式，则综合器先用组合逻辑电路计算表达式，计算结果送入触发器的数据输入。</li><li>case语句<br>case语句与多路选择器电路的对应关系是显而易见的，但是，建模时要注意<img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202302171032451.png"                      alt="image.png"                ><br>否则会造成电路的复杂化，甚至导致形成时序电路。</li></ol><p>when others &#x3D;&gt; null;<br>3. 循环语句<br>       VHDL的循环语句有三种：for循环 、while循环,和无限loop…end loop。<br>   有next语句和exit来配合循环语句使用。</p><h1 id="并行语句"><a href="#并行语句" class="headerlink" title="并行语句"></a>并行语句</h1><p>包括进程、并行赋值语句、块语句、生成语句等。</p><ol><li>进程<br> 进程是VHDL中描述硬件行为最为有力的方式。进程内的语句属于顺序语句，而进程本身则属于并行语句。<br> 综合后的电路存在寄存器，则是时序电路。<br> 还存在两种情况：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202302171037857.png"                      alt="image.png"                ></li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202302171038365.png"                      alt="image.png"                ><br>2. 信号赋值语句<br>      信号赋值语句的处理是直截了当的，下面:<br>              语句1被综合成一要硬连线；<br>               对于语句2，R将被当作常数处理；<br>              语句3被综合为组合逻辑电路。</p><pre><code>  当然语句1和语句3经过逻辑优化后，可能改变形式或者被消去。      (1)  S &lt;=  A;      (2)  R&lt;= ‘1’;      (3)  T &lt;= (B xor C) or (D and E) or (F xnor G);</code></pre><ol start="3"><li>条件和选择赋值<br>VHDL的并行语句有两种方式进行有条件的赋值，即条件赋值<strong>when…else</strong> 和选择赋值<strong>with…select…when</strong>。实际上，这两种语法结构都可以改写为等价的顺序语句。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202302171039047.png"                      alt="image.png"                ></li><li>元件例化语句<br> <img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202302171054012.png"                      alt="image.png"                ></li><li>块语句<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202302171055162.png"                      alt="image.png"                ></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="VHDL 学习" scheme="http://example.com/tags/VHDL-%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>VHDL第七章综合</title>
    <link href="http://example.com/2023/02/17/VHDL%E7%AC%AC%E4%B8%83%E7%AB%A0%E7%BB%BC%E5%90%88/"/>
    <id>http://example.com/2023/02/17/VHDL%E7%AC%AC%E4%B8%83%E7%AB%A0%E7%BB%BC%E5%90%88/</id>
    <published>2023-02-16T16:57:48.000Z</published>
    <updated>2023-02-16T16:58:25.319Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="综合的层次"><a href="#综合的层次" class="headerlink" title="综合的层次"></a>综合的层次</h1><p>针对一个给定的设计，根据设计应实现的功能与相应的约束条件，通过计算机的优化处理，获得一个满足要求的设计方案，这个过程就称为 <strong>综合</strong>。</p><p>其中综合具有多个层次，从高到低可以分为</p><ol><li>算法层</li><li>寄存器传输层</li><li>逻辑层</li><li>电路层</li><li>版图层</li></ol><p><strong>三个大的层次</strong>：<br>高层次综合、逻辑综合、版图综合<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202302170028496.png"                      alt="image.png"                ></p><h1 id="高层次综合"><a href="#高层次综合" class="headerlink" title="高层次综合"></a>高层次综合</h1><p>从<strong>算法级</strong>的行为描述到 <strong>寄存器传输级</strong>的描述<br>输入：硬件描述语言的源描述</p><p>综合结果：一般包括一个 <strong>数据通路</strong>和一个<strong>控制器</strong>。</p><ul><li>数据通路（datapath）: 由寄存器、功能单元、多路器和总线等模块构成对的互连网络，实现数据的传输。</li><li>控制器（controller）: 通常由硬连逻辑（hardwired logic）或固件（firmware）构成，用于控制数据通路中数据的传输。</li></ul><hr><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202302170029337.png"                      alt="image.png"                ></p><p>作用：</p><ul><li>可以明显地提高设计速度，缩短设计周期，允许设计者寻求最优或满意的设计方案</li><li>可以直接进行数字系统从行为描述到芯片描述的设计工作。 （）</li></ul><h1 id="逻辑综合"><a href="#逻辑综合" class="headerlink" title="逻辑综合"></a>逻辑综合</h1><p>高抽象层次的描述自动地转换成较低抽象层次描述的一种方法。<br>将RTL级的描述转换成<strong>门级网表</strong>的过程。<br>如图<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202302170035073.png"                                     ></p><h2 id="约束条件"><a href="#约束条件" class="headerlink" title="约束条件"></a><strong>约束条件</strong></h2><p>对于数字系统而言，芯片的面积和芯片的速度是综合时最主要考虑</p><ol><li><p>约束的表示：<br> 用于综合的约束可以用用户定义属性来表示。用户定义只是用于给综合工具传递约束信息，仿真时被忽略</p><div class="highlight-container" data-rel="Vhdl"><figure class="iseeu highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">attribute</span>  属性名 ： 数据类型 ；</span><br><span class="line">    <span class="keyword">attribute</span>  属性名  <span class="keyword">of</span>  对象名 ：对象类型  <span class="keyword">is</span>  值</span><br><span class="line"><span class="comment">---------------------------------------</span></span><br><span class="line"><span class="keyword">Type</span> state <span class="keyword">is</span> ( s0, s1, s2, s3 ); </span><br><span class="line"><span class="keyword">Attribute</span> enum_encoding <span class="keyword">of</span> state : <span class="keyword">type</span> <span class="keyword">is</span> “<span class="number">00</span>  <span class="number">01</span> <span class="number">11</span> <span class="number">10</span>”; </span><br><span class="line"><span class="comment">--用于确定状态编码，用于有限状态机的描述中</span></span><br><span class="line"><span class="comment">-----------------------------------------</span></span><br><span class="line"><span class="keyword">Attribute</span> pin_no :<span class="built_in">natural</span> ;</span><br><span class="line"><span class="keyword">Attribute</span> pin_no <span class="keyword">of</span> q : <span class="keyword">signal</span> <span class="keyword">is</span> <span class="number">42</span> ;   </span><br><span class="line"><span class="comment">--为端口锁定芯片引脚</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div></li><li><p>资源的约束</p><div class="highlight-container" data-rel="Vhdl"><figure class="iseeu highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>   <span class="keyword">select</span>=‘<span class="number">1</span>’  <span class="keyword">then</span>  q&lt;=a+b;</span><br><span class="line">         <span class="keyword">else</span>  q&lt;=c+d;   </span><br><span class="line">     <span class="keyword">end</span> <span class="keyword">if</span> ;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p>可以用2个加法器和1个二路选择器实现<br>也可以用1个加法器和2个二路选择器完成。</p></li><li><p>时间的约束<br> 假定一个时序系统工作在20MHZ的时钟频率，那么通过状态寄存器和此态产生逻辑的最大延迟不能超过50ns（20MHZ的倒数）</p></li></ol><hr><h2 id="属性-（好像不太重要）"><a href="#属性-（好像不太重要）" class="headerlink" title="属性 （好像不太重要）"></a>属性 （好像不太重要）</h2><p>用于规定设计所进行的环境，如用属性规定对输出器件必须<strong>驱动的负载</strong>、驱动设计时器件的<strong>驱动能力</strong>和<strong>输入信号的时序</strong>等。</p><ol><li><p>负载属性<br> <img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202302170044841.png"                      alt="image.png"                ></p></li><li><p>驱动属性<br>![[Pasted image 20230217004524.png]]</p></li><li><p>到达时间<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202302170046430.png"                      alt="image.png"                ></p></li></ol><h1 id="工艺库"><a href="#工艺库" class="headerlink" title="工艺库"></a>工艺库</h1><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202302170047025.png"                      alt="image.png"                ><br>多数综合工具都有计算FPGA单元的十分完整的复杂延时模型，它包括固有的上升和下降时间、输出负载与输入级波形斜度延时和估计的引线延时，下图从门输入到输出的<strong>总延时</strong>是：</p><p><u>固有延时＋负载延时＋引线延时＋输入级波形斜度延时</u><br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202302170047247.png"                      alt="image.png"                ></p><h1 id="RTL描述代码"><a href="#RTL描述代码" class="headerlink" title="RTL描述代码"></a>RTL描述代码</h1><p>又被称为 <strong>数据流描述</strong><br>是一种明确规定寄存器描述的方法。即，是指以规定设计中采用的各种寄存器形式为特征，然后在寄存器之间插入组合逻辑。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202302170048738.png"                      alt="image.png"                ></p><h1 id="逻辑综合器"><a href="#逻辑综合器" class="headerlink" title="逻辑综合器"></a>逻辑综合器</h1><p>从 RTL 转换到 门级描述 有3个步骤：</p><ul><li>把RTL描述转换为未优化的<strong>门级布尔</strong>描述；</li><li>执行布尔优化算法，产生一个优化的<strong>布尔方程描述；</strong></li><li>按目的工艺要求，采用相应的工艺库把优化的布尔等式描述<strong>映射</strong>到<strong>实际逻辑门</strong>。</li></ul><h1 id="转换"><a href="#转换" class="headerlink" title="转换"></a>转换</h1><ul><li><p>从RTL描述转换到布尔等式描述通<strong>常并不是由用户控制的</strong>，所产生的中介形式一般为特定优化工具的格式，甚至是不可能由用户可视的。</p></li><li><p>按照这种中介描述，ALL  IF、CASE、LOOP语句、条件信号赋值和选择信号赋值语句转换到它们的布尔表达式，或者<strong>由装配组成触发器和锁存器</strong>,或者由<strong>推论去生成触发器和锁存器。</strong></p></li><li><p>按照其中介的描述这两种情况都能<strong>产生同样的触发器和锁存器</strong></p></li></ul><h1 id="布尔优化"><a href="#布尔优化" class="headerlink" title="布尔优化"></a>布尔优化</h1><ul><li><p>优化过程用大量的算法和规则把一个非优化的布尔的描述转化到优化的布尔描述。</p></li><li><p>转换非优化布尔描述到最低级描述，然后优化那种描述，并尝试用（引入中间变量）共享公共项去减少逻辑门。</p></li><li><p>包括展平设计和提取公因数</p></li></ul><h2 id="展平设计"><a href="#展平设计" class="headerlink" title="展平设计"></a>展平设计</h2><p>转换非优化布尔描述到一种pla格式的过程称为展平设计，即它将所有的逻辑关系都转换成简单的AND和OR的表达式。</p><p>目的：使非优化的布尔描述格式转换成能执行优化算法的布尔描述格式。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202302170054716.png"                      alt="image.png"                ></p><h2 id="提取公因数"><a href="#提取公因数" class="headerlink" title="提取公因数"></a>提取公因数</h2><p>提取公因数是把附加的中间项加到结构描述中的一种过程。展平设计通常会使设计变得非常之大，而且要产生大扇出，展平过程可能比提取公因数的设计在速度上要慢得多<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202302170054082.png"                      alt="image.png"                ></p><h1 id="映射到门级"><a href="#映射到门级" class="headerlink" title="映射到门级"></a>映射到门级</h1><ul><li><p>映射过程取出由优化后的布尔描述并利用从工艺库得到的逻辑和定时信息<strong>生成网表</strong>。</p></li><li><p>网表是对用户所需面积和速度目标的体现，有大量的网表，它们在功能上相同但在速度和面积上都在一个很宽的范围上可变</p></li></ul><p>示例：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202302170056884.png"                      alt="image.png"                ></p><h1 id="HDL逻辑综合软件"><a href="#HDL逻辑综合软件" class="headerlink" title="HDL逻辑综合软件"></a>HDL逻辑综合软件</h1><ul><li><p>这类软件将把HDL语言翻译成<strong>最基本的与或非门的连接关系（网表），输出edf文件</strong>，导给PLD&#x2F;FPGA厂家的软件进行试配和布线。</p></li><li><p>，在进行复杂HDL设计时，基本上都会使用一些<strong>专业的逻辑综合软件</strong>，而不使用PLD&#x2F;FPGA厂家的集成开发软件中自带的逻辑综合功能。</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="VHDL 学习" scheme="http://example.com/tags/VHDL-%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>VHDL第六章仿真</title>
    <link href="http://example.com/2023/02/16/VHDL%E7%AC%AC%E5%85%AD%E7%AB%A0%E4%BB%BF%E7%9C%9F/"/>
    <id>http://example.com/2023/02/16/VHDL%E7%AC%AC%E5%85%AD%E7%AB%A0%E4%BB%BF%E7%9C%9F/</id>
    <published>2023-02-16T12:53:34.000Z</published>
    <updated>2023-02-16T12:54:04.749Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="啥是仿真："><a href="#啥是仿真：" class="headerlink" title="啥是仿真："></a>啥是仿真：</h1><blockquote><p>对设计的硬件描述和设计结果 通过计算级查错、验证的过程<br>仿真（模拟）<br> 从电路的描述（语言描述或图形描述）抽象出模型，然后将外部激励信号或数据施加于此模型，通过观察该模型在外部激励下的反应来判断该电路系统是否实现预期的功能。</p></blockquote><h1 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h1><ul><li><p>检查原始描述的正确性；</p></li><li><p>检查设计结果在逻辑功能和时序上的正确性；</p></li><li><p>检查设计结果中不含违反设计规则的错误。</p></li></ul><h1 id="级别"><a href="#级别" class="headerlink" title="级别"></a>级别</h1><ul><li><strong>高层次仿真</strong>： 对系统的抽象行为算法或混合描述的电路进行的仿真。<u>仿真的重点是系统功能和系统内部运算过程。</u></li><li><strong>RTL级仿真</strong> ：对基于RTL方法描述的电路进行的仿真。重点是<u>仿真数据在系统内元件之间的流动关系。</u></li><li><strong>逻辑仿真</strong>：对基于门、触发器、和功能块构成的系统进行的仿真。其方法是通过对电路施加激励，观察电路对激励的响应来判断电路的功能是否正确。检查其逻辑功能、延迟特性和负载特性等。</li><li><strong>电路级仿真</strong>：对基于晶体管、电阻、电容等构成的电路进行的仿真。其方法是通过求解电路方程而得出电路电压和电流，从而求出电路输出波形的一种模拟（如PSPICE）。特点：仿真时间长、精度高。</li><li><strong>开关级仿真</strong>：介于电路级和逻辑级之间的模拟。将电阻、电容不当作一个元件而当作晶体管和节点的参数来处理的一种模拟方法。其复杂度和仿真时间介乎于电路级与逻辑级之间。</li></ul><p><strong>仿真（模拟）的级别</strong><br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202302162015065.png"                      alt="image.png"                ></p><h1 id="逻辑模拟模型"><a href="#逻辑模拟模型" class="headerlink" title="逻辑模拟模型"></a>逻辑模拟模型</h1><h2 id="电路模型"><a href="#电路模型" class="headerlink" title="电路模型"></a>电路模型</h2><ul><li><strong>电路网表：</strong><blockquote><pre><code>逻辑电路是元件的集合。</code></pre><p>指描述电路拓扑关系的一种数据结构。如果指定了每个元件各端口所连接的信号，就可以唯一确定电路的连接关系。每个元件有其元件模型。<br>    一个元件E的描述包含有元件名N、模型M、输入端信号PI和输出端信号PO四部分。即 E&#x3D;（N，M，PI，PO）</p></blockquote></li></ul><p>元件N 模型M 输入信号PI  输出信号PO</p><p>以一位加法器的网表为例<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202302162020807.png"                      alt="image.png"                ></p><p><strong>负载表</strong><br>在仿真时需要频繁查找每个信号后所连接的元件，称为负载元件<br>还是以上面的图为例</p><p>X信号后面接的是 E1、E3<br>Y 信号后面的是： E1、 E3<br>同理可得到所有的负载：<br>CIN： E2，E4；<br> S1：   E2，E4；<br> S2：   E5；<br> S3：   E5；<br> SUM： Ø；<br>COUT： Ø </p><h2 id="元件模型"><a href="#元件模型" class="headerlink" title="元件模型"></a>元件模型</h2><p><strong>门的模型</strong></p><ul><li>功能、参数、扇入、扇出、延迟时间<br><strong>功能块的模型</strong></li><li>功能和行为描述，不关系其内部结构和组成</li></ul><h2 id="信号模型"><a href="#信号模型" class="headerlink" title="信号模型"></a>信号模型</h2><p>二值模型、三值模型、四值模型、五值、九值<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202302162028934.png"                      alt="image.png"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202302162028278.png"                      alt="image.png"                ></p><h2 id="信号值强度"><a href="#信号值强度" class="headerlink" title="信号值强度"></a>信号值强度</h2><p>表示 信号的驱动能力<br>强制级F：信号连接电源或地，或者是一些输入激励；<br>电阻级R：信号通过一较大的电阻与电源或地相连；<br>高阻级Z：信号与电源和地相隔离 </p><h2 id="九值模型"><a href="#九值模型" class="headerlink" title="九值模型"></a>九值模型</h2><p>逻辑电平：0、1、未知X<br>强度：强制F、弱W、高阻Z、未定U和无关-<br>每个值为逻辑电平与强度的组合，其中高阻、未定和无关只有一个电平值（未知）</p><blockquote><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202302162031138.png"                      alt="image.png"                ></p></blockquote><h2 id="延迟模型"><a href="#延迟模型" class="headerlink" title="延迟模型"></a>延迟模型</h2><p><strong>1.  元件延迟</strong></p><ul><li>零延迟模型：理想元件；</li><li>单位延迟模型：所有元件延迟时间相同，单位为1个时间单位；</li><li>标准延迟模型： 对每种元件设定一个标准延迟时间，不考虑元件的离散性；</li><li>上升下降延迟模型：分别考虑上升下降延迟时间；<br>模糊延迟模型：给出元件的最大最小延迟时间；</li></ul><p><strong>2. 惯性延迟与传输延迟</strong></p><ul><li>惯性延迟： 输入脉冲信号能在得到相应所需最小脉冲宽度</li><li>传输延迟： 信号通过元件和连线传输过程中所引起的延迟</li></ul><p><strong>前者</strong><br>在VHDL语句中，不做说明的一定是<strong>惯性延迟</strong>。<br>当信号脉冲宽度小于器件的固有延时时，器件将不对输入信号作出任何反应。</p><p><code>Z &lt;= X;(惯性延时缺省) </code>Z &lt;&#x3D; X AFTER 3 ns;（ 3ns的惯性延时）&#96;</p><hr><p><strong>后者</strong>  (TRANSPORT)<br>传输延时常用于描述总线延时、连线延时及ASIC芯片中的路径延时。<br>输出端信号在经过传输延时后，将完全复现输入端的波形<br>&#96;Z &lt;&#x3D; TRANSPORT X AFTER delay;  (只有传输延时)<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202302162037027.png"                      alt="image.png"                ></p><h1 id="思考题："><a href="#思考题：" class="headerlink" title="思考题："></a>思考题：</h1><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202302162040741.png"                      alt="image.png"                ><br><code>Vo &lt;= Vi AFTER 4ns; </code></p><p>1 ) 有脉冲输出<br>2 ）无<br>3 ）有 延迟为4ns<br>4 )  有传播延迟，所以不考虑惯性延迟<br>有脉冲输出（不管多小）</p><h1 id="仿真过程"><a href="#仿真过程" class="headerlink" title="仿真过程"></a>仿真过程</h1><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202302162046680.png"                      alt="image.png"                ></p><ol><li>搭建好电路并进行编译。</li><li>将编译好后形成的网表放入数据库中。</li><li>产生波形文件。当仿真启动后，将读取数据库文件，生成模拟驱动程序，连同波形文件，输出结果。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="VHDL 学习" scheme="http://example.com/tags/VHDL-%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>VHDL第五章状态机的设计</title>
    <link href="http://example.com/2023/02/16/VHDL%E7%AC%AC%E4%BA%94%E7%AB%A0%E7%8A%B6%E6%80%81%E6%9C%BA%E7%9A%84%E8%AE%BE%E8%AE%A1/"/>
    <id>http://example.com/2023/02/16/VHDL%E7%AC%AC%E4%BA%94%E7%AB%A0%E7%8A%B6%E6%80%81%E6%9C%BA%E7%9A%84%E8%AE%BE%E8%AE%A1/</id>
    <published>2023-02-16T07:55:39.000Z</published>
    <updated>2023-02-16T07:56:11.512Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202302151643936.png"                      alt="image.png"                ><br>时序电路 &#x3D; 组合逻辑+存储电路</p><h1 id="三位计数器"><a href="#三位计数器" class="headerlink" title="三位计数器"></a>三位计数器</h1><p>从000到111，循环往复<br>以上升沿触发的D触发器作为状态寄存器<br>次态和现态的真值表<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202302151649863.png"                      alt="image.png"                ></p><p>又因为计数器需要使用到3个状态寄存器（即是3个状态寄存器）<br>通过卡诺图的推导（次态方程出错）<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202302152047281.png"                      alt="image.png"                ><br>根据次态方程画出详细的电路</p><h1 id="时序电路与状态机"><a href="#时序电路与状态机" class="headerlink" title="时序电路与状态机"></a>时序电路与状态机</h1><ul><li><p>状态机的本质</p><blockquote><p>具有逻辑顺序或时序规律事件的一种描述方法。具有逻辑顺序和时序规律的事件都适合用状态机描述<br>同步时序逻辑电路符合状态机的一般特征。 便可以使用状态机来描述</p></blockquote></li><li><p>三个基本要素：</p></li></ul><ol><li><strong>状态</strong>  ：状态变量</li><li><strong>输出</strong>：某一个状态时特定发生的事件</li><li><strong>输入</strong>： 进入状态的条件</li></ol><h1 id="电路的竞争与冒险"><a href="#电路的竞争与冒险" class="headerlink" title="电路的竞争与冒险"></a>电路的竞争与冒险</h1><p>竞争：多径信号汇合在一路，时间上有先有后。（<strong>殊途同归</strong>）<br>冒险： 因为竞争导致电路输出错误的现象。</p><p>组合逻辑电路存在该问题，所以时序逻辑电路也一样面临着这个问题<br>使用<strong>同步时序逻辑电路</strong>可以克服次态逻辑的上述问题</p><p>课本上消除竞争与冒险的方法：</p><ol><li>考虑接入滤波电容 （简单但影响输出）</li><li>修改逻辑设计（电路往往十分复杂）</li><li>引入脉冲（对信号的时钟周期有所限制）</li></ol><h2 id="时钟周期的选取"><a href="#时钟周期的选取" class="headerlink" title="时钟周期的选取"></a>时钟周期的选取</h2><p>在时序电路中，存在 3个重要的时序参数<br>$$建立时间t_{su}、保持时间t_{hold}、传播时延t_{c-q}$$</p><p>$t_{su}$ 建立时间： 触发器的时钟信号上升沿到达之前，数据稳定的时间<br>$t_{hold}$ 数据输入触发器所需的时间<br>$t_{c-q}$ 信号传播路径上传播所需要的时间</p><p>在同步时序电路中，假设电路其中一级最长的延时为$t_{plogic}$<br>综上所述：<br>$$时钟周期T 应该满足————T&gt; t_{su}+t_{c-q} + t_{plogic}$$<br>#值得一看 </p><h1 id="有限状态机的描述方法"><a href="#有限状态机的描述方法" class="headerlink" title="有限状态机的描述方法"></a>有限状态机的描述方法</h1><p><strong>ASM图</strong>（Algorithmic State Machine）其中蕴含着<strong>时序</strong>的关系，类似流程图。</p><h2 id="ASM图的组成部分"><a href="#ASM图的组成部分" class="headerlink" title="ASM图的组成部分"></a>ASM图的组成部分</h2><ul><li><p>状态框：<br> 使用矩形框来表示状态  ， <strong>状态名</strong>写在左上角，<strong>二进制</strong>编码写在右上角 ，<strong>操作内容</strong>写在方框内，该状态经历的时间至少为一个时钟周期。<br> <img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202302152118633.png"                      alt="image.png"                ></p></li><li><p>判断框</p><blockquote><p>棱形框表示   内部是条件，分支需要写明相应条件<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202302152122167.png"                      alt="image.png"                ></p></blockquote></li><li><p>条件框：</p><blockquote><p>椭圆框表示  条件框必定与 判断框相连<br>仅当判断框中<strong>判断变量满足相应的转移条件</strong>时，才进行条件框中标明的操作和信号输出</p></blockquote></li></ul><p>跟状态框有相似 但也有很大差别</p><blockquote><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202302152120410.png"                      alt="image.png"                ></p></blockquote><ul><li>状态单元</li></ul><blockquote><p>单个条件框 或者状态框组成<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202302152126015.png"                      alt="image.png"                ><br> 每一个状态单元表示一个时钟周期下 系统的状态</p></blockquote><h1 id="交通灯ASM图"><a href="#交通灯ASM图" class="headerlink" title="交通灯ASM图"></a>交通灯ASM图</h1><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202302152132606.png"                      alt="image.png"                >解答：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202302152133716.png"                      alt="image.png"                ></p><h1 id="有限状态机的分类"><a href="#有限状态机的分类" class="headerlink" title="有限状态机的分类"></a>有限状态机的分类</h1><p><strong>信号输出</strong> ： Mealy  （与当前状态有关，还与外部输入有关，<strong>首尾相连</strong>） Moore（仅与当前状态有关）<br><strong>结构</strong>： 单进程 双进程 三进程<br><strong>表达方式</strong>：符号化 状态机、确定状态编码状态机（顺序编码、onehot编码 格雷码状态机）</p><p>使用的判断条件: </p><ul><li><strong>Moore</strong>型的输出与当前的输入部分无关，所以当前输出产生的人和效果将会延迟到下一个时钟周期</li><li>最大优点：将输入部分和输出部分隔离</li></ul><p>Mealy 型，输出是输入的函数，所以当输入信号改变时，输出将在一个时钟周期内发生改变</p><p><strong>单进程描述</strong>：<br>它就是将状态机的三个逻辑单元（<em>状态寄存器、下状态产生逻辑、输出逻辑</em>）合并起来，采用一个进程描述</p><hr><h2 id="单进程状态机"><a href="#单进程状态机" class="headerlink" title="单进程状态机"></a>单进程状态机</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202302161050267.png"                      alt="image.png"                ></p><p>还是以交通灯为例</p><div class="highlight-container" data-rel="Vhdl"><figure class="iseeu highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">LIBRARY</span> IEEE ;</span><br><span class="line"><span class="keyword">USE</span> IEEE.STD_LOGIC_1164.<span class="keyword">ALL</span> ;</span><br><span class="line"><span class="keyword">ENTITY</span>  traffic  <span class="keyword">IS</span></span><br><span class="line">     <span class="keyword">PORT</span>( clock , timed , car : <span class="keyword">IN</span> <span class="built_in">std_ulogic</span> ;</span><br><span class="line"> start_timer, major_green, minor_green : <span class="keyword">OUT</span> <span class="built_in">std_ulogic</span> );</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">ENTITY</span> traffic ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ARCHITECTURE</span> asm1 <span class="keyword">OF</span> traffic <span class="keyword">IS</span> </span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">PROCESS</span> （clock, timed, car)</span><br><span class="line">        <span class="keyword">TYPE</span> state_type <span class="keyword">IS</span> (G, R);    <span class="comment">--这里采用符号化状态机的描述方式</span></span><br><span class="line">        <span class="keyword">VARIABLE</span> state: state_type; <span class="comment">--将状态定义为变量类型</span></span><br><span class="line">    <span class="keyword">BEGIN</span></span><br><span class="line">        <span class="keyword">IF</span> (rising_edge(clock)) <span class="keyword">THEN</span></span><br><span class="line">            <span class="keyword">CASE</span> state <span class="keyword">IS</span></span><br><span class="line">                <span class="keyword">WHEN</span> G =&gt;</span><br><span class="line">                    major_green &lt;= ‘<span class="number">1</span>’;</span><br><span class="line">                    minor_green &lt;= ‘<span class="number">0</span>’;</span><br><span class="line">                <span class="keyword">IF</span> (car = ‘<span class="number">1</span>’) <span class="keyword">THEN</span></span><br><span class="line">        start_timer &lt;= ‘ <span class="number">1</span>’;</span><br><span class="line">        state := R;</span><br><span class="line">    <span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line">     <span class="keyword">WHEN</span> R =&gt;</span><br><span class="line">    major_green &lt;= ‘<span class="number">0</span>’;</span><br><span class="line">minor_green &lt;= ‘<span class="number">1</span>’;</span><br><span class="line"><span class="keyword">IF</span> (timed= ‘<span class="number">1</span>’) <span class="keyword">THEN</span></span><br><span class="line">    start_timer &lt;= ‘ <span class="number">1</span>’;</span><br><span class="line">        state := G;</span><br><span class="line">    <span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line">    <span class="keyword">END</span> <span class="keyword">CASE</span>;</span><br><span class="line">    <span class="keyword">END</span> <span class="keyword">IF</span></span><br><span class="line">    <span class="keyword">END</span> <span class="keyword">PROCESS</span>;</span><br><span class="line"><span class="keyword">END</span> ARCHITETURE;</span><br></pre></td></tr></table></figure></div><ul><li>单进程状态变量可以定义为<strong>变量</strong>类型，放在进程的说明部分</li><li>进程开头有时钟有效边沿的检测语句</li><li>注意在这里进程敏感参数表中的car和timed可省去<br>rising_edge(clock)也可以写成clock’event and clock&#x3D;‘1’</li><li>if条件涵盖不完整的if语句会产生<strong>寄存器</strong></li><li>有时候会引入不必要的寄存器–&gt; 如果将描述<strong>时序</strong>的部分放在具有边沿检测条件的<strong>if语句或wait语句的进程</strong>中，而将描述<strong>组合电路的语句放在普通的进程</strong>中，这样可以有效控制寄存器的引入。**(双进程，一个负责时序，一个负责组合逻辑电路**)</li></ul><h2 id="双进程状态机"><a href="#双进程状态机" class="headerlink" title="双进程状态机"></a>双进程状态机</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202302161051214.png"                      alt="image.png"                ></p><div class="highlight-container" data-rel="Vhdl"><figure class="iseeu highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">LIBRARY</span> IEEE ;</span><br><span class="line"><span class="keyword">USE</span> IEEE.STD_LOGIC_1164.<span class="keyword">ALL</span> ;</span><br><span class="line"><span class="keyword">ENTITY</span>  traffic  <span class="keyword">IS</span></span><br><span class="line">     <span class="keyword">PORT</span>( clock , timed , car : <span class="keyword">IN</span> <span class="built_in">std_ulogic</span> ;</span><br><span class="line">    start_timer, major_green, minor_green : <span class="keyword">OUT</span> <span class="built_in">std_ulogic</span> );</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">ENTITY</span> traffic ;</span><br><span class="line"><span class="keyword">ARCHITECTURE</span> asm2 <span class="keyword">OF</span> traffic <span class="keyword">IS</span></span><br><span class="line"><span class="keyword">TYPE</span> state_type <span class="keyword">IS</span> (G, R);   <span class="comment">--利用枚举类型定义状态</span></span><br><span class="line"><span class="keyword">SIGNAL</span> pr_state, nx_state : state_type; </span><br><span class="line">       <span class="comment">--将状态机的现态、次态定义为全局信号，便于在进程间传递信息</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">seq: <span class="keyword">PROCESS</span> (clock)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">IF</span>(rising_edge(clock)) <span class="keyword">THEN</span></span><br><span class="line">        pr_state &lt;= nx_state;<span class="comment">--次态是寄存器的输入</span></span><br><span class="line">    <span class="keyword">END</span> <span class="keyword">IF</span>;               <span class="comment">--条件涵盖不完整的if语句产生状态寄存器</span></span><br><span class="line"><span class="keyword">END</span> <span class="keyword">PROCESS</span> seq; <span class="comment">--产生状态寄存器的进程</span></span><br><span class="line">com: <span class="keyword">PROCESS</span> (pr_state, car, timed)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    start_timer &lt;= ‘<span class="number">0</span>’;</span><br><span class="line">    <span class="keyword">CASE</span> pr_state <span class="keyword">IS</span></span><br><span class="line">        <span class="keyword">WHEN</span> G =&gt;</span><br><span class="line">        major_green &lt;= ‘<span class="number">1</span>’;</span><br><span class="line"> minor_green &lt;= ‘<span class="number">0</span>’;</span><br><span class="line"><span class="keyword">IF</span> (car = ‘<span class="number">1</span>’) <span class="keyword">THEN</span></span><br><span class="line">     start_timer &lt;= ‘<span class="number">1</span>’;</span><br><span class="line">     nx_state &lt;= R;</span><br><span class="line"><span class="keyword">ELSE</span></span><br><span class="line">     nx_state &lt;= G;</span><br><span class="line"> <span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line"> <span class="keyword">WHEN</span> R =&gt;</span><br><span class="line">        major_green &lt;= ‘<span class="number">0</span>’;</span><br><span class="line"> minor_green &lt;= ‘<span class="number">1</span>’;</span><br><span class="line">     <span class="keyword">IF</span> (timed= ‘<span class="number">1</span>’) <span class="keyword">THEN</span></span><br><span class="line">         nx_state &lt;= G;</span><br><span class="line">     <span class="keyword">ELSE</span></span><br><span class="line">         nx_state &lt;= R;</span><br><span class="line">     <span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line"> <span class="keyword">END</span> <span class="keyword">CASE</span>;</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">PROCESS</span> com;</span><br><span class="line"><span class="comment">--**产生次态和输出逻辑的进程**</span></span><br><span class="line"><span class="keyword">END</span> asm2;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><ul><li>双进程中状态变量要定义为<strong>SIGNAL</strong>类型，用于进程间信息的传递</li><li>可以在产生寄存器的进程中加上异步复位语句，用于确定初始状态:    &#96;IF reset&#x3D;‘1’ THEN pr_state &lt;&#x3D; G;&#96;&#96;</li><li>注意在组合进程中if语句要写完整if-else</li></ul><h2 id="三进程状态机"><a href="#三进程状态机" class="headerlink" title="三进程状态机"></a>三进程状态机</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202302161115656.png"                      alt="image.png"                ></p><div class="highlight-container" data-rel="Vhdl"><figure class="iseeu highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">LIBRARY</span> IEEE ;</span><br><span class="line"><span class="keyword">USE</span> IEEE.STD_LOGIC_1164.<span class="keyword">ALL</span> ;</span><br><span class="line"><span class="keyword">ENTITY</span>  traffic  <span class="keyword">IS</span></span><br><span class="line">     <span class="keyword">PORT</span>( clock , timed , car : <span class="keyword">IN</span> <span class="built_in">std_ulogic</span> ;</span><br><span class="line">    start_timer, major_green, minor_green : <span class="keyword">OUT</span> <span class="built_in">std_ulogic</span> );</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">ENTITY</span> traffic ;</span><br><span class="line"><span class="keyword">ARCHITECTURE</span> asm2 <span class="keyword">OF</span> traffic <span class="keyword">IS</span></span><br><span class="line"><span class="keyword">TYPE</span> state_type <span class="keyword">IS</span> (G, R); <span class="comment">--利用枚举类型定义状态</span></span><br><span class="line"><span class="keyword">SIGNAL</span> pr_state, next_state : state_type; </span><br><span class="line">       <span class="comment">--将状态机的现态、次态定义为全局信号，便于在进程间传递信息</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">seq: <span class="keyword">PROCESS</span> (clock)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">IF</span>(rising_edge(clock)) <span class="keyword">THEN</span></span><br><span class="line">        pr_state &lt;= next_state;<span class="comment">--次态是寄存器的输入</span></span><br><span class="line">    <span class="keyword">END</span> <span class="keyword">IF</span>;               <span class="comment">--条件涵盖不完整的if语句产生状态寄存器</span></span><br><span class="line"><span class="keyword">END</span> <span class="keyword">PROCESS</span> seq; <span class="comment">--产生状态寄存器的进程</span></span><br><span class="line">ns: <span class="keyword">PROCESS</span> (car, timed, pr_state)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">CASE</span> pr_state <span class="keyword">IS</span></span><br><span class="line"><span class="keyword">WHEN</span> G =&gt;</span><br><span class="line">    <span class="keyword">IF</span> (car = ‘<span class="number">1</span>’) <span class="keyword">THEN</span></span><br><span class="line">        nx_state &lt;= R;</span><br><span class="line">    <span class="keyword">ELSE</span></span><br><span class="line"> nx_state &lt;= G;</span><br><span class="line"> <span class="keyword">WHEN</span> R =&gt;</span><br><span class="line">    <span class="keyword">IF</span> (timed = ‘<span class="number">1</span>’) <span class="keyword">THEN</span></span><br><span class="line">        nx_state &lt;= G;</span><br><span class="line">    <span class="keyword">ELSE</span></span><br><span class="line"> nx_state &lt;= R;</span><br><span class="line">    <span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">CASE</span>;</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">PROCESS</span> ns;</span><br><span class="line"> <span class="comment">--产生次态逻辑进程</span></span><br><span class="line"> op: <span class="keyword">PROCESS</span> (car, pr_state) <span class="comment">-- Mealy State Machine</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">start_timer &lt;= ‘<span class="number">0</span>’;</span><br><span class="line"><span class="keyword">IF</span> (pr_state = G) <span class="keyword">THEN</span></span><br><span class="line">    major_green &lt;= ‘<span class="number">1</span>’;</span><br><span class="line">    minor_green &lt;= ‘<span class="number">0</span>’;</span><br><span class="line">    <span class="keyword">IF</span> (car = ‘<span class="number">1</span>’) <span class="keyword">THEN</span></span><br><span class="line">        start_timer &lt;= ‘<span class="number">1</span>’;</span><br><span class="line">    <span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line"><span class="keyword">ELSE</span></span><br><span class="line">    major_green &lt;= ‘<span class="number">0</span>’;</span><br><span class="line">    minor_green &lt;= ‘<span class="number">1</span>’;</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">PROCESS</span> op;</span><br><span class="line"><span class="comment">--产生输出逻辑的进程</span></span><br><span class="line"><span class="keyword">END</span> asm3；</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div><h1 id="表达方式分类"><a href="#表达方式分类" class="headerlink" title="表达方式分类"></a>表达方式分类</h1><ul><li>符号化状态机<blockquote><p>在程序的说明部分使用<strong>TYPE语句定义枚举类型</strong>，其元素用状态机的状态名来定义。状态变量（如状态机的现态和次态）定义为变量或信号，并将状态变量的数据类型定义为含有既定状态元素的枚举类型。<br>多进程时：定义为信号，便于信息的传递。<br>（以上三种进程例子皆是符号化状态机）</p></blockquote></li></ul><p>类型定义语句：<br>TYPE 数据类型名 IS 数据类型定义 OF 基本数据类型;<br>TYPE 数据类型名 IS 数据类型定义;</p><ul><li>确定状态编码状态机<blockquote><p>二进制编码<br>格雷码编码<br>one-hot 编码</p></blockquote></li></ul><p>每一个状态都使用二进制位来编码<br>例：<br>实现4状态的状态机，其其二进制编码可为 状态1&#x3D;“00”状态2&#x3D;“01”状态3&#x3D;“10”状态4&#x3D;“11”<br>需要的寄存器数量最少，有n个寄存器就可以对$2^n$个状态进行编码</p><p>格雷码：每次仅有一位发生变化<br>特点：触发器使用较少，速度较慢，不会产生两位同时翻转的情况。当状态位的输出被异步应用时，格雷码编码是有益的。</p><p>One-hot 编码：<br>每个状态采用一个触发器进行记录<br>以四个状态为例<br>状态1 “0001”      状态2：”0010“  ….. “0100”.  “1000”;<br>特点： 触发器使用较多，逻辑简单、速度快</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202302161423714.png"                      alt="image.png"                ><br>指明表达方式：</p><div class="highlight-container" data-rel="Vhdl"><figure class="iseeu highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ARCHITECTURE</span> BEHAV <span class="keyword">OF</span> BINARY <span class="keyword">IS</span></span><br><span class="line"><span class="keyword">TYPE</span> STATE_TYPE <span class="keyword">IS</span>(S1, S2, S3, S4, S5, S6, S7);</span><br><span class="line"><span class="keyword">ATTRIBUTE</span> ENUM_ENCODING: <span class="built_in">STRING</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">ATTRIBUTE</span> ENUM_ENCODING <span class="keyword">OF</span> STATE_TYPE: <span class="keyword">TYPE</span> <span class="keyword">IS</span> <span class="string">&quot;001 010 011 100 101 110 111&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 换成 one-hot 编码</span></span><br><span class="line"><span class="keyword">ATTRIBUTE</span> ENUM_ENCODING <span class="keyword">OF</span> STATE_TYPE: <span class="keyword">TYPE</span> </span><br><span class="line"><span class="keyword">IS</span> <span class="string">&quot;00000001 00000010 00000100 00001000 00010000 00100000 01000000 10000000&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div><h1 id="状态机VHDL举例实现"><a href="#状态机VHDL举例实现" class="headerlink" title="状态机VHDL举例实现"></a>状态机VHDL举例实现</h1><h2 id="Mealy型状态机"><a href="#Mealy型状态机" class="headerlink" title="Mealy型状态机"></a>Mealy型状态机</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202302161429301.png"                      alt="image.png"                ></p><p>对应的代码：</p><p><strong>输出端无同步</strong></p><div class="highlight-container" data-rel="Vhdl"><figure class="iseeu highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">LIBRARY</span> ieee;</span><br><span class="line"><span class="keyword">USE</span> ieee.std_logic_1164.<span class="keyword">all</span>;</span><br><span class="line"><span class="comment">-----------------------------------------------</span></span><br><span class="line"><span class="keyword">ENTITY</span> simple_fsm <span class="keyword">IS</span></span><br><span class="line"><span class="keyword">PORT</span> (a, b, d, clk, rst: <span class="keyword">IN</span> <span class="built_in">BIT</span>;</span><br><span class="line">      x: <span class="keyword">OUT</span> <span class="built_in">BIT</span>);</span><br><span class="line"><span class="keyword">END</span> simple_fsm;</span><br><span class="line"><span class="comment">-----------------------------------------------</span></span><br><span class="line"><span class="keyword">ARCHITECTURE</span> simple_fsm <span class="keyword">OF</span> simple_fsm <span class="keyword">IS</span></span><br><span class="line"><span class="keyword">TYPE</span> state <span class="keyword">IS</span> (stateA, stateB);</span><br><span class="line"><span class="keyword">SIGNAL</span> pr_state, nx_state: state;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="comment">----------Lower section: ----------------------</span></span><br><span class="line"><span class="keyword">PROCESS</span> (rst, clk)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">IF</span> (rst = <span class="string">&#x27;1&#x27;</span>) <span class="keyword">THEN</span></span><br><span class="line">pr_state &lt;= stateA;</span><br><span class="line">    <span class="keyword">ELSIF</span> (clk<span class="symbol">&#x27;EVENT</span> <span class="keyword">AND</span> clk = <span class="string">&#x27;1&#x27;</span>) <span class="keyword">THEN</span></span><br><span class="line">pr_state &lt;= nx_state;</span><br><span class="line">    <span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">PROCESS</span>;</span><br><span class="line"><span class="comment">-------------Upper section: --------------------</span></span><br><span class="line"><span class="keyword">PROCESS</span> (a, b, d, pr_state)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">CASE</span> pr_state <span class="keyword">IS</span></span><br><span class="line">    <span class="keyword">WHEN</span> stateA =&gt;</span><br><span class="line">x &lt;= a;</span><br><span class="line"><span class="keyword">IF</span> (d = <span class="string">&#x27;1&#x27;</span>) <span class="keyword">THEN</span></span><br><span class="line">nx_state &lt;= stateB;</span><br><span class="line"><span class="keyword">ELSE</span></span><br><span class="line">    nx_state &lt;= stateA;</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line">    <span class="keyword">WHEN</span> stateB =&gt;</span><br><span class="line">x &lt;= b;</span><br><span class="line"><span class="keyword">IF</span> (d = <span class="string">&#x27;1&#x27;</span>) <span class="keyword">THEN</span> </span><br><span class="line">    nx_state &lt;= stateA;</span><br><span class="line"><span class="keyword">ELSE</span></span><br><span class="line">    nx_state &lt;= stateB;</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line">    <span class="keyword">END</span> <span class="keyword">CASE</span>;</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">PROCESS</span>;</span><br><span class="line"><span class="keyword">END</span> simple_fsm;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p>RTL图：<img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202302161440523.png"                      alt="image.png"                ></p><hr><p>输出端有同步</p><div class="highlight-container" data-rel="Vhdl"><figure class="iseeu highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">LIBRARY</span> ieee;</span><br><span class="line"><span class="keyword">USE</span> ieee.std_logic_1164.<span class="keyword">all</span>;</span><br><span class="line"><span class="comment">-----------------------------------------------</span></span><br><span class="line"><span class="keyword">ENTITY</span> simple_fsm <span class="keyword">IS</span></span><br><span class="line"><span class="keyword">PORT</span> (a, b, d, clk, rst: <span class="keyword">IN</span> <span class="built_in">BIT</span>;</span><br><span class="line">      x: <span class="keyword">OUT</span> <span class="built_in">BIT</span>);</span><br><span class="line"><span class="keyword">END</span> simple_fsm;</span><br><span class="line"><span class="comment">-----------------------------------------------</span></span><br><span class="line"><span class="keyword">ARCHITECTURE</span> simple_fsm <span class="keyword">OF</span> simple_fsm <span class="keyword">IS</span></span><br><span class="line"><span class="keyword">TYPE</span> state <span class="keyword">IS</span> (stateA, stateB);</span><br><span class="line"><span class="keyword">SIGNAL</span> pr_state, nx_state: state;</span><br><span class="line"><span class="keyword">SIGNAL</span> temp: <span class="built_in">BIT</span> := <span class="string">&#x27;0&#x27;</span>;  <span class="comment">-- 多了这个全局的temp,作为中间变量，在改变状态时进行改变</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="comment">----------Lower section: ----------------------</span></span><br><span class="line"><span class="keyword">PROCESS</span> (rst, clk)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">IF</span> (rst = <span class="string">&#x27;1&#x27;</span>) <span class="keyword">THEN</span></span><br><span class="line">pr_state &lt;= stateA;</span><br><span class="line">    <span class="keyword">ELSIF</span> (clk<span class="symbol">&#x27;EVENT</span> <span class="keyword">AND</span> clk = <span class="string">&#x27;1&#x27;</span>) <span class="keyword">THEN</span></span><br><span class="line">x &lt;= temp;</span><br><span class="line">pr_state &lt;= nx_state;</span><br><span class="line">    <span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">PROCESS</span>;</span><br><span class="line"><span class="comment">-------------Upper section: --------------------</span></span><br><span class="line"><span class="keyword">PROCESS</span> (a, b, d, pr_state)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">CASE</span> pr_state <span class="keyword">IS</span></span><br><span class="line">    <span class="keyword">WHEN</span> stateA =&gt;</span><br><span class="line">temp &lt;= a;</span><br><span class="line"><span class="keyword">IF</span> (d = <span class="string">&#x27;1&#x27;</span>) <span class="keyword">THEN</span></span><br><span class="line">    nx_state &lt;= stateB;</span><br><span class="line"><span class="keyword">ELSE</span></span><br><span class="line">    nx_state &lt;= stateA;</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line">    <span class="keyword">WHEN</span> stateB =&gt;</span><br><span class="line">temp &lt;= b;</span><br><span class="line"><span class="keyword">IF</span> (d = <span class="string">&#x27;1&#x27;</span>) <span class="keyword">THEN</span> </span><br><span class="line">    nx_state &lt;= stateA;</span><br><span class="line"><span class="keyword">ELSE</span></span><br><span class="line">    nx_state &lt;= stateB;</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line">    <span class="keyword">END</span> <span class="keyword">CASE</span>;</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">PROCESS</span>;</span><br><span class="line"><span class="keyword">END</span> simple_fsm;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p>RTL图：<img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202302161446002.png"                      alt="image.png"                ></p><p>仿真对比：<img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202302161446393.png"                      alt="image.png"                ><br>结论： 同步之后（利用temp一起作为输出）同时存储了output<br>Mealy型需要该操作才能设计同步时序电路<br>Moore则不需要</p><h2 id="使用三种进程描述状态机"><a href="#使用三种进程描述状态机" class="headerlink" title="使用三种进程描述状态机"></a>使用三种进程描述状态机</h2><p>单，双，三：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202302161452705.png"                      alt="image.png"                ></p><p>单进程：</p><div class="highlight-container" data-rel="Vhdl"><figure class="iseeu highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">LIBRARY</span> IEEE;</span><br><span class="line"><span class="keyword">USE</span> IEEE.STD_LOGIC_1164.<span class="keyword">ALL</span>;</span><br><span class="line"><span class="keyword">ENTITY</span> s_machine1 <span class="keyword">IS</span></span><br><span class="line"><span class="keyword">PORT</span> ( clk, reset : <span class="keyword">IN</span> <span class="built_in">STD_LOGIC</span>;</span><br><span class="line">   state_inputs : <span class="keyword">IN</span> <span class="built_in">STD_LOGIC_VECTOR</span> (<span class="number">0</span> <span class="keyword">TO</span> <span class="number">1</span>);</span><br><span class="line">   comb_outputs : <span class="keyword">OUT</span> <span class="built_in">INTEGER</span> <span class="keyword">RANGE</span> <span class="number">0</span> <span class="keyword">TO</span> <span class="number">15</span> );</span><br><span class="line"><span class="keyword">END</span> s_machine2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ARCHITECTURE</span> behv <span class="keyword">OF</span> s_machine1 <span class="keyword">IS</span></span><br><span class="line"><span class="keyword">TYPE</span> FSM_ST <span class="keyword">IS</span> (s0, s1, s2, s3);</span><br><span class="line"><span class="keyword">SIGnAL</span> state: FSM_ST;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">PROCESS</span> (reset, clk, state, state_inputs)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">IF</span> reset = <span class="string">&#x27;1&#x27;</span> <span class="keyword">THEN</span> </span><br><span class="line">state &lt;= s0;</span><br><span class="line">    <span class="keyword">ELSIF</span> clk = <span class="string">&#x27;1&#x27;</span> <span class="keyword">AND</span> clk<span class="symbol">&#x27;EVENT</span></span><br><span class="line">    <span class="keyword">THEN</span></span><br><span class="line">    <span class="keyword">CASE</span> state <span class="keyword">IS</span></span><br><span class="line"><span class="keyword">WHEN</span> s0 =&gt; </span><br><span class="line">    comb_outputs &lt;= <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">IF</span> state_inputs = <span class="string">&quot;00&quot;</span> <span class="keyword">THEN</span> </span><br><span class="line">        state &lt;= s0;</span><br><span class="line">    <span class="keyword">ELSE</span> </span><br><span class="line">        state &lt;= s1;</span><br><span class="line">    <span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line"><span class="keyword">WHEN</span> s1 =&gt; </span><br><span class="line">    comb_outputs &lt;= <span class="number">8</span>;</span><br><span class="line">    <span class="keyword">IF</span> state_inputs = <span class="string">&quot;00&quot;</span> <span class="keyword">THEN</span> </span><br><span class="line">        state &lt;= s1;</span><br><span class="line">    <span class="keyword">ELSE</span> </span><br><span class="line">        state &lt;= s2;</span><br><span class="line">    <span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line"><span class="keyword">WHEN</span> s2 =&gt;</span><br><span class="line">    comb_outputs &lt;= <span class="number">12</span>;</span><br><span class="line">    <span class="keyword">IF</span> state_inputs = <span class="string">&quot;11&quot;</span> <span class="keyword">THEN</span> </span><br><span class="line">        state &lt;= s3;</span><br><span class="line">    <span class="keyword">ELSE</span> </span><br><span class="line">        state &lt;= s0;</span><br><span class="line">    <span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line"><span class="keyword">WHEN</span> s3 =&gt; </span><br><span class="line">    comb_outputs &lt;= <span class="number">14</span>;</span><br><span class="line">    <span class="keyword">IF</span> state_inputs = <span class="string">&quot;11&quot;</span> <span class="keyword">THEN</span></span><br><span class="line">        state &lt;= s3;</span><br><span class="line">    <span class="keyword">ELSE</span> </span><br><span class="line">        state &lt;= s0;</span><br><span class="line">    <span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">END</span> <span class="keyword">CASE</span>;</span><br><span class="line">    <span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">END</span> <span class="keyword">PROCESS</span>;</span><br><span class="line"><span class="keyword">END</span> behv; <span class="comment">--（完）</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202302161525995.png"                      alt="image.png"                ></p><p>(请耐心看完)</p><p>双进程：</p><div class="highlight-container" data-rel="Vhdl"><figure class="iseeu highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">LIBRARY</span> IEEE;</span><br><span class="line"><span class="keyword">USE</span> IEEE.STD_LOGIC_1164.<span class="keyword">ALL</span>;</span><br><span class="line"><span class="keyword">ENTITY</span> s_machine <span class="keyword">IS</span></span><br><span class="line"><span class="keyword">PORT</span> ( clk, reset : <span class="keyword">IN</span> <span class="built_in">STD_LOGIC</span>;</span><br><span class="line">   state_inputs : <span class="keyword">IN</span> <span class="built_in">STD_LOGIC_VECTOR</span> (<span class="number">0</span> <span class="keyword">TO</span> <span class="number">1</span>);</span><br><span class="line">   comb_outputs : <span class="keyword">OUT</span> <span class="built_in">INTEGER</span> <span class="keyword">RANGE</span> <span class="number">0</span> <span class="keyword">TO</span> <span class="number">15</span> );</span><br><span class="line"><span class="keyword">END</span> s_machine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ARCHITECTURE</span> behv <span class="keyword">OF</span> s_machine <span class="keyword">IS</span></span><br><span class="line"><span class="keyword">TYPE</span> FSM_ST <span class="keyword">IS</span> (s0, s1, s2, s3);</span><br><span class="line"><span class="keyword">SIGNAL</span> current_state, next_state : FSM_ST;</span><br><span class="line"><span class="comment">--------------------------------</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">REG: <span class="keyword">PROCESS</span> (reset, clk)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">IF</span> reset = <span class="string">&#x27;1&#x27;</span> <span class="keyword">THEN</span> current_state &lt;= s0;</span><br><span class="line">    <span class="keyword">ELSIF</span> clk = <span class="string">&#x27;1&#x27;</span> <span class="keyword">AND</span> clk<span class="symbol">&#x27;EVENT</span> <span class="keyword">THEN</span></span><br><span class="line">  current_state &lt;= next_state;</span><br><span class="line">    <span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">PROCESS</span>;</span><br><span class="line"><span class="comment">------------------------------</span></span><br><span class="line">COM: <span class="keyword">PROCESS</span> (current_state, state_inputs)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">CASE</span> current_state <span class="keyword">IS</span></span><br><span class="line">    <span class="keyword">WHEN</span> s0 =&gt; </span><br><span class="line">        comb_outputs &lt;= <span class="number">5</span>;</span><br><span class="line">  <span class="keyword">IF</span> state_inputs = <span class="string">&quot;00&quot;</span> <span class="keyword">THEN</span> </span><br><span class="line">      next_state &lt;= s0;</span><br><span class="line">  <span class="keyword">ELSE</span> </span><br><span class="line">  next_state &lt;= s1;</span><br><span class="line">  <span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">WHEN</span> s1 =&gt; </span><br><span class="line">  comb_outputs &lt;= <span class="number">8</span>;</span><br><span class="line">  <span class="keyword">IF</span> state_inputs = <span class="string">&quot;00&quot;</span> <span class="keyword">THEN</span> </span><br><span class="line">      next_state &lt;= s1;</span><br><span class="line">  <span class="keyword">ELSE</span> </span><br><span class="line">      next_state &lt;= s2;</span><br><span class="line">  <span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line">    <span class="keyword">WHEN</span> s2 =&gt;</span><br><span class="line">  comb_outputs &lt;= <span class="number">12</span>;</span><br><span class="line">  <span class="keyword">IF</span> state_inputs = <span class="string">&quot;11&quot;</span> <span class="keyword">THEN</span> </span><br><span class="line">      next_state &lt;= s3;</span><br><span class="line">  <span class="keyword">ELSE</span> </span><br><span class="line">      next_state &lt;= s0;</span><br><span class="line">  <span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line">    <span class="keyword">WHEN</span> s3 =&gt; </span><br><span class="line">    comb_outputs &lt;= <span class="number">14</span>;</span><br><span class="line">  <span class="keyword">IF</span> state_inputs = <span class="string">&quot;11&quot;</span> <span class="keyword">THEN</span></span><br><span class="line">      next_state &lt;= s3;</span><br><span class="line">  <span class="keyword">ELSE</span> </span><br><span class="line">      next_state &lt;= s0;</span><br><span class="line">        <span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">END</span> <span class="keyword">CASE</span>;</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">PROCESS</span>;</span><br><span class="line"><span class="keyword">END</span> behv;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202302161525490.png"                      alt="image.png"                ></p><p>三进程：</p><div class="highlight-container" data-rel="Vhdl"><figure class="iseeu highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">LIBRARY</span> IEEE;</span><br><span class="line"><span class="keyword">USE</span> IEEE.STD_LOGIC_1164.<span class="keyword">ALL</span>;</span><br><span class="line"><span class="keyword">ENTITY</span> s_machine2 <span class="keyword">IS</span></span><br><span class="line"><span class="keyword">PORT</span> ( clk, reset : <span class="keyword">IN</span> <span class="built_in">STD_LOGIC</span>;</span><br><span class="line">state_inputs : <span class="keyword">IN</span> <span class="built_in">STD_LOGIC_VECTOR</span> (<span class="number">0</span> <span class="keyword">TO</span> <span class="number">1</span>);</span><br><span class="line">comb_outputs : <span class="keyword">OUT</span> <span class="built_in">INTEGER</span> <span class="keyword">RANGE</span> <span class="number">0</span> <span class="keyword">TO</span> <span class="number">15</span> );</span><br><span class="line"><span class="keyword">END</span> s_machine2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ARCHITECTURE</span> behv <span class="keyword">OF</span> s_machine2 <span class="keyword">IS</span></span><br><span class="line"><span class="keyword">TYPE</span> FSM_ST <span class="keyword">IS</span> (s0, s1, s2, s3);</span><br><span class="line"><span class="keyword">SIGNAL</span> current_state, next_state: FSM_ST;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">REG: <span class="keyword">PROCESS</span> (reset, clk)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">IF</span> reset = <span class="string">&#x27;1&#x27;</span> <span class="keyword">THEN</span> </span><br><span class="line">            current_state &lt;= s0;</span><br><span class="line">    <span class="keyword">ELSIF</span> clk = <span class="string">&#x27;1&#x27;</span> <span class="keyword">AND</span> clk<span class="symbol">&#x27;EVENT</span> <span class="keyword">THEN</span></span><br><span class="line"> current_state &lt;= next_state;</span><br><span class="line">    <span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">PROCESS</span>;</span><br><span class="line"><span class="comment">--状态逻辑</span></span><br><span class="line"><span class="comment">------------------------------------------------------</span></span><br><span class="line">COM_STATE: <span class="keyword">PROCESS</span>(current_state, state_inputs)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">CASE</span> current_state <span class="keyword">IS</span></span><br><span class="line">    <span class="keyword">WHEN</span> s0 =&gt; </span><br><span class="line">        <span class="keyword">IF</span> state_inputs = <span class="string">&quot;00&quot;</span> <span class="keyword">THEN</span> </span><br><span class="line">      next_state &lt;= s0;</span><br><span class="line">  <span class="keyword">ELSE</span> </span><br><span class="line">      next_state &lt;= s1;</span><br><span class="line">  <span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">WHEN</span> s1 =&gt; </span><br><span class="line">  <span class="keyword">IF</span> state_inputs = <span class="string">&quot;01&quot;</span> <span class="keyword">THEN</span> </span><br><span class="line">      next_state &lt;= s1;</span><br><span class="line"><span class="keyword">ELSE</span> </span><br><span class="line">next_state &lt;= s2;</span><br><span class="line">      <span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line">  <span class="keyword">WHEN</span> s2 =&gt;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">IF</span> state_inputs = <span class="string">&quot;10&quot;</span> <span class="keyword">THEN</span> </span><br><span class="line">next_state &lt;= s3;</span><br><span class="line">      <span class="keyword">ELSE</span> </span><br><span class="line">          next_state &lt;= s0;</span><br><span class="line">      <span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line">  <span class="keyword">WHEN</span> s3 =&gt; </span><br><span class="line">      <span class="keyword">IF</span> state_inputs = <span class="string">&quot;11&quot;</span> <span class="keyword">THEN</span></span><br><span class="line">next_state &lt;= s3;</span><br><span class="line">      <span class="keyword">ELSE</span> </span><br><span class="line">          next_state &lt;= s0;</span><br><span class="line">      <span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line">  <span class="keyword">END</span> <span class="keyword">CASE</span>;</span><br><span class="line">    <span class="keyword">END</span> <span class="keyword">PROCESS</span>; </span><br><span class="line">    <span class="comment">--- 次态逻辑</span></span><br><span class="line"><span class="comment">---------------------------------------------</span></span><br><span class="line">    COM_OUT: <span class="keyword">PROCESS</span> (current_state)</span><br><span class="line">    <span class="keyword">BEGIN</span></span><br><span class="line">  <span class="keyword">CASE</span> current_state <span class="keyword">IS</span></span><br><span class="line">  <span class="keyword">WHEN</span> s0 =&gt;</span><br><span class="line">      comb_outputs &lt;= <span class="number">5</span>;</span><br><span class="line">  <span class="keyword">WHEN</span> s1 =&gt;</span><br><span class="line">      comb_outputs &lt;= <span class="number">8</span>;</span><br><span class="line">  <span class="keyword">WHEN</span> s2 =&gt;</span><br><span class="line">      comb_outputs &lt;= <span class="number">12</span>;</span><br><span class="line">  <span class="keyword">WHEN</span> s3 =&gt;</span><br><span class="line">      comb_outputs &lt;= <span class="number">14</span>;</span><br><span class="line">        <span class="keyword">END</span> <span class="keyword">CASE</span>;</span><br><span class="line">    <span class="keyword">END</span> <span class="keyword">PROCESS</span>;</span><br><span class="line"><span class="keyword">END</span> behv;</span><br><span class="line"><span class="comment">-- 输出逻辑</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202302161529983.png"                      alt="image.png"                ></p><hr><p>单进程描述的状态机的RTL电路相较于两外两种多了一个  <strong>寄存器</strong><br>而 双进程与三进程则对于简单的设计一样（更为建议）</p><hr><h2 id="串流数据流检测器"><a href="#串流数据流检测器" class="headerlink" title="串流数据流检测器"></a>串流数据流检测器</h2><p>设计一个串行数据流检测器。<br>要求：输入连续的二进制数，当检测到连续“1”的个数大于3个的时候，输出“1”；其他状态输出“0”。</p><p>分析：确定所需的状态数，取决于数据流中出现连续“1”的个数，应该为4个状态。</p><p>画出ASM图：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202302161536819.png"                      alt="image.png"                ></p><div class="highlight-container" data-rel="Vhdl"><figure class="iseeu highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">LIBRARY</span> ieee;</span><br><span class="line"><span class="keyword">USE</span> ieee.std_logic_1164.<span class="keyword">all</span>;</span><br><span class="line"><span class="comment">----------------------------------------</span></span><br><span class="line"><span class="keyword">ENTITY</span> string_detector <span class="keyword">IS</span></span><br><span class="line"><span class="keyword">PORT</span> (d, clk, rst: <span class="keyword">IN</span> <span class="built_in">BIT</span>;</span><br><span class="line">      q: <span class="keyword">OUT</span> <span class="built_in">BIT</span>);</span><br><span class="line"><span class="keyword">END</span> string_detector;</span><br><span class="line"><span class="comment">---------------------------------------</span></span><br><span class="line"><span class="keyword">ARCHITECTURE</span> my_arch <span class="keyword">OF</span> string_detector <span class="keyword">IS</span></span><br><span class="line"><span class="keyword">TYPE</span> state <span class="keyword">IS</span> (zero, one ,two, three);</span><br><span class="line"><span class="keyword">SIGNAL</span> pr_state, nx_state: state;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="comment">-----------Lower section;-----------</span></span><br><span class="line"><span class="keyword">PROCESS</span> (rst, clk)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">IF</span> (rst = <span class="string">&#x27;1&#x27;</span>) <span class="keyword">THEN</span></span><br><span class="line">        pr_state &lt;= zero;</span><br><span class="line">    <span class="keyword">ELSIF</span> (clk<span class="symbol">&#x27;EVENT</span> <span class="keyword">AND</span> clk = <span class="string">&#x27;1&#x27;</span>) <span class="keyword">THEN</span></span><br><span class="line">        pr_state &lt;= nx_state;</span><br><span class="line">    <span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">PROCESS</span>;</span><br><span class="line"><span class="comment">-----------Upper section:------------</span></span><br><span class="line"><span class="keyword">PROCESS</span> (d, pr_state)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">CASE</span> pr_state <span class="keyword">IS</span></span><br><span class="line">    <span class="keyword">WHEN</span> zero =&gt;</span><br><span class="line">        q &lt;= <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        <span class="keyword">IF</span> (d = <span class="string">&#x27;1&#x27;</span>) <span class="keyword">THEN</span></span><br><span class="line">    nx_state &lt;= one;</span><br><span class="line"><span class="keyword">ELSE</span></span><br><span class="line">        nx_state &lt;= zero;</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line"><span class="keyword">WHEN</span> one =&gt;</span><br><span class="line">q &lt;= <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"><span class="keyword">IF</span> (d = <span class="string">&#x27;1&#x27;</span>) <span class="keyword">THEN</span></span><br><span class="line">    nx_state &lt;= two;</span><br><span class="line"><span class="keyword">ELSE</span></span><br><span class="line">    nx_state &lt;= zero;</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line"><span class="keyword">WHEN</span> two =&gt;</span><br><span class="line">q &lt;= <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"><span class="keyword">IF</span> (d = <span class="string">&#x27;1&#x27;</span>) <span class="keyword">THEN</span></span><br><span class="line">    nx_state &lt;= </span><br><span class="line">three;</span><br><span class="line"><span class="keyword">ELSE</span></span><br><span class="line">    nx_state &lt;= zero;</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line"><span class="keyword">WHEN</span> three =&gt;</span><br><span class="line">q &lt;= <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line"><span class="keyword">IF</span> (d = <span class="string">&#x27;1&#x27;</span>) <span class="keyword">THEN</span></span><br><span class="line">   nx_state &lt;= three;</span><br><span class="line">    <span class="keyword">ELSE</span></span><br><span class="line">   nx_state &lt;= zero;</span><br><span class="line">    <span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line"> <span class="keyword">END</span> <span class="keyword">CASE</span>;</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">PROCESS</span>;</span><br><span class="line"><span class="keyword">END</span> my_arch;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p>综合后是 使用的one-hot 编码<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202302161544787.png"                      alt="image.png"                ><br>如果需要指定编码则可以使用attribute语句<br>将结构体的声明部分添加如下代码</p><div class="highlight-container" data-rel="Vhdl"><figure class="iseeu highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ATTRIBUTE</span> enum_encoding: <span class="built_in">string</span>;</span><br><span class="line"><span class="keyword">ATTRIBUTE</span> enum_encoding <span class="keyword">OF</span> state : <span class="keyword">TYPE</span> <span class="keyword">IS</span> <span class="string">&quot;00 01 10 11&quot;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p>软件设置： FSM Explorer 选项勾选，综合后也是one-hot编码</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="VHDL 学习" scheme="http://example.com/tags/VHDL-%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>VHDL第四章时序逻辑电路</title>
    <link href="http://example.com/2023/02/15/VHDL%E7%AC%AC%E5%9B%9B%E7%AB%A0%E6%97%B6%E5%BA%8F%E9%80%BB%E8%BE%91%E7%94%B5%E8%B7%AF/"/>
    <id>http://example.com/2023/02/15/VHDL%E7%AC%AC%E5%9B%9B%E7%AB%A0%E6%97%B6%E5%BA%8F%E9%80%BB%E8%BE%91%E7%94%B5%E8%B7%AF/</id>
    <published>2023-02-15T08:35:50.000Z</published>
    <updated>2023-02-15T08:36:18.760Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>输出不仅与当前输入有关，还与原始状态有关</p><p>组合逻辑电路+ <strong>存储电路</strong>（包含有 触发器，寄存器等）</p><ol><li>锁存器</li><li>触发器</li><li>寄存器</li><li>计数器</li><li>乘法器<br>时序电路引进了 现态和次态的概念<br>可以使用逻辑表达式来进行描述</li></ol><p>#分类</p><ul><li>按照触发器（动作特点）<blockquote><pre><code>同步时序逻辑电路，同一个时钟信号。异步时序逻辑电路，没有统一的时钟脉冲信号，触发器的变化有前有后。</code></pre></blockquote></li></ul><p>按照输出信号的特点</p><blockquote><pre><code>米丽（Mealy）输入状态不仅与存储电路状态Q有关，并且与外部输入X有关。摩尔（Moore）输出状态仅与存储电路的状态Q有关 无关输入X。</code></pre></blockquote><h1 id="时序逻辑电路——锁存器"><a href="#时序逻辑电路——锁存器" class="headerlink" title="时序逻辑电路——锁存器"></a>时序逻辑电路——<strong>锁存器</strong></h1><ul><li>RS锁存器<br>根据真值表来进行判断<table><thead><tr><th align="center">S</th><th align="center">R</th><th align="center">Q</th><th align="center">~Q</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">0</td><td align="center">1</td><td align="center">1</td></tr><tr><td align="center">0</td><td align="center">1</td><td align="center">0</td><td align="center">1</td></tr><tr><td align="center">1</td><td align="center">0</td><td align="center">1</td><td align="center">0</td></tr><tr><td align="center">1</td><td align="center">1</td><td align="center">Q</td><td align="center">~Q</td></tr></tbody></table></li></ul><div class="highlight-container" data-rel="Vhdl"><figure class="iseeu highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Library</span>  ieee;</span><br><span class="line"><span class="keyword">Use</span>  ieee.std_logic_1164.<span class="keyword">all</span>;</span><br><span class="line"><span class="keyword">Entity</span>  SR_latch2  <span class="keyword">is</span> </span><br><span class="line">    <span class="keyword">port</span> ( S, R: <span class="keyword">in</span>  <span class="built_in">std_logic</span> ;</span><br><span class="line">             Q, Qbar :<span class="keyword">out</span>  <span class="built_in">std_logic</span>);</span><br><span class="line"><span class="keyword">End</span>  SR_latch2;</span><br><span class="line"><span class="keyword">Architecture</span>  behav  <span class="keyword">of</span>   R_latch2  <span class="keyword">is</span></span><br><span class="line"><span class="keyword">Begin</span></span><br><span class="line"> <span class="keyword">process</span> ( R , S ) <span class="keyword">is</span></span><br><span class="line">      <span class="keyword">variable</span> rs: <span class="built_in">std_logic_vector</span>(<span class="number">1</span> <span class="keyword">downto</span> <span class="number">0</span>);</span><br><span class="line"><span class="keyword">begin</span> </span><br><span class="line">      rs:=R&amp;S;</span><br><span class="line">      <span class="keyword">case</span> rs <span class="keyword">is</span></span><br><span class="line">          <span class="keyword">when</span> <span class="string">&quot;00&quot;</span> =&gt; Q&lt;=<span class="string">&#x27;1&#x27;</span>; Qbar&lt;=<span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">          <span class="keyword">when</span> <span class="string">&quot;01&quot;</span> =&gt; Q&lt;=<span class="string">&#x27;1&#x27;</span>; Qbar&lt;=<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">          <span class="keyword">when</span> <span class="string">&quot;10&quot;</span> =&gt; Q&lt;=<span class="string">&#x27;0&#x27;</span>; Qbar&lt;=<span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">          <span class="keyword">when</span> <span class="keyword">others</span>=&gt;<span class="keyword">null</span>;</span><br><span class="line">       <span class="keyword">end</span> <span class="keyword">case</span>;</span><br><span class="line">   <span class="keyword">end</span> <span class="keyword">process</span>;</span><br><span class="line"><span class="keyword">end</span> behav;</span><br><span class="line"><span class="comment">--敏感参数有R和S</span></span><br></pre></td></tr></table></figure></div><p>D锁存器<br>D锁存器通过<strong>条件涵盖不完整的if语句</strong> 产生寄存器；<br>#值得一看<br>敏感参数表包含D、Enable，综合后  形成一个电平触发的锁存器</p><div class="highlight-container" data-rel="Vhdl"><figure class="iseeu highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Library</span>  ieee;</span><br><span class="line"><span class="keyword">Use</span>  ieee.std_logic_1164.<span class="keyword">all</span>;</span><br><span class="line"><span class="keyword">Entity</span>  D_latch  <span class="keyword">is</span></span><br><span class="line">     <span class="keyword">port</span> ( D, Enable: <span class="keyword">in</span>  <span class="built_in">std_logic</span> ;</span><br><span class="line">               Q: <span class="keyword">out</span>  <span class="built_in">std_logic</span> );</span><br><span class="line"><span class="keyword">End</span>  D_latch;</span><br><span class="line"><span class="keyword">Architecture</span>  behav  <span class="keyword">of</span>   D_latch  <span class="keyword">is</span></span><br><span class="line"><span class="keyword">Begin</span></span><br><span class="line">      <span class="keyword">process</span>(D, Enable) </span><br><span class="line">      <span class="keyword">begin</span></span><br><span class="line">           <span class="keyword">if</span> (Enable=‘<span class="number">1</span>’) <span class="keyword">then</span>  Q&lt;=D;</span><br><span class="line">           <span class="keyword">end</span>  <span class="keyword">if</span>;</span><br><span class="line">      <span class="keyword">end</span>  <span class="keyword">process</span>;</span><br><span class="line"><span class="keyword">End</span>  behav;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><h1 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h1><p>触发器是指<strong>边沿触发</strong>的寄存器，常见的有<strong>D型，JK型，T型</strong>。在描述触发器前要注意时钟上升沿的描述</p><h2 id="D触发器"><a href="#D触发器" class="headerlink" title="D触发器"></a>D触发器</h2><p>一个D 一个Clock<br>输出一个Q</p><div class="highlight-container" data-rel="Vhdl"><figure class="iseeu highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">library</span> ieee;</span><br><span class="line"><span class="keyword">use</span> ieee.std_logic_1164.<span class="keyword">all</span>;</span><br><span class="line"><span class="keyword">entity</span> d_ff1 <span class="keyword">is</span></span><br><span class="line"><span class="keyword">port</span>(D,clk: <span class="keyword">in</span> <span class="built_in">std_logic</span>;</span><br><span class="line">Q:<span class="keyword">out</span> <span class="built_in">std_logic</span>);</span><br><span class="line"><span class="keyword">end</span> d_ff1;</span><br><span class="line"><span class="keyword">architecture</span> behav <span class="keyword">of</span> d_ff1 <span class="keyword">is</span></span><br><span class="line"><span class="keyword">begin</span> </span><br><span class="line"><span class="keyword">process</span>(clk)</span><br><span class="line"><span class="keyword">begin</span> </span><br><span class="line"><span class="keyword">if</span>(clk&#x27; event <span class="keyword">and</span> clk = <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"><span class="keyword">then</span> Q&lt;=D;</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">if</span> ;</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">process</span>;</span><br><span class="line"><span class="keyword">end</span> behav;</span><br><span class="line"><span class="comment">---第二种方式</span></span><br><span class="line"><span class="keyword">process</span></span><br><span class="line">       <span class="keyword">begin</span> </span><br><span class="line">             <span class="keyword">wait</span> <span class="keyword">until</span> (clk=‘<span class="number">1</span>’) ;  </span><br><span class="line"><span class="comment">--等同于 wait until clk’event and clk=‘1’；</span></span><br><span class="line">             Q&lt;=D;</span><br><span class="line">       <span class="keyword">end</span> <span class="keyword">process</span>;</span><br><span class="line"><span class="keyword">End</span> behav;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p>时钟边沿检测到的方法 #值得一看 </p><blockquote><ol><li>上升沿：clock’  event and clock&#x3D;‘1’<br>下降沿：clock’  event and clock&#x3D;‘0’;<ol start="2"><li>利用WAIT语句启动进程，检测colck的上升沿</li><li>Process 和 if语句的相结合  利用clk启动进程，并进行判断</li></ol></li></ol></blockquote><h2 id="带Q非的D触发器"><a href="#带Q非的D触发器" class="headerlink" title="带Q非的D触发器"></a>带Q非的D触发器</h2><p>不是简单的按照前面直接加上一个Qbar<br>如<code>Qbar = NOT D</code><br>时钟上升沿会有两个赋值，导致有两个D触发器</p><p>解决方式</p><ol><li><p>信号法：</p><div class="highlight-container" data-rel="Vhdl"><figure class="iseeu highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">architecture</span> sig <span class="keyword">of</span> D_ff <span class="keyword">is</span></span><br><span class="line"><span class="keyword">signal</span> state: <span class="built_in">std_logic</span>;</span><br><span class="line"><span class="keyword">begin</span> </span><br><span class="line"><span class="keyword">process</span>(clock, reset)</span><br><span class="line"><span class="keyword">begin</span> </span><br><span class="line"><span class="keyword">if</span>(reset=<span class="string">&#x27;0&#x27;</span>)<span class="keyword">then</span> </span><br><span class="line">state&lt;=<span class="string">&#x27;0&#x27;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">if</span> rising_edge(clock)</span><br><span class="line"><span class="keyword">then</span> state&lt;=D;</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">process</span>;</span><br><span class="line">Q&lt;=state;</span><br><span class="line">Qbar&lt;=<span class="keyword">not</span> state;</span><br><span class="line"><span class="keyword">end</span> sig;</span><br><span class="line"><span class="comment">--利用信号作为中间变量，D触发器</span></span><br></pre></td></tr></table></figure></div></li><li><p>变量法：</p><div class="highlight-container" data-rel="Vhdl"><figure class="iseeu highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Architecture</span> var <span class="keyword">of</span> D_FF <span class="keyword">is</span> </span><br><span class="line"><span class="keyword">Begin</span></span><br><span class="line">     <span class="keyword">process</span>(clock, reset)</span><br><span class="line">         <span class="keyword">variable</span> state: <span class="built_in">std_logic</span> ;</span><br><span class="line">     <span class="keyword">begin</span></span><br><span class="line">         <span class="keyword">if</span> (reset=‘<span class="number">0</span>’) <span class="keyword">then</span>  state:=‘<span class="number">0</span>’;</span><br><span class="line">         <span class="keyword">elsif</span> rising_edge(clock)</span><br><span class="line">         <span class="keyword">then</span> state:=D;</span><br><span class="line">         <span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line">         Q&lt;=state;</span><br><span class="line">         Qbar&lt;=<span class="keyword">not</span> state;</span><br><span class="line">      <span class="keyword">end</span> <span class="keyword">process</span>;</span><br><span class="line"><span class="keyword">End</span> var;</span><br><span class="line"><span class="comment">--跟变量法相似，只是state的范围限定在process内</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div></li></ol><h2 id="JK触发器"><a href="#JK触发器" class="headerlink" title="JK触发器"></a>JK触发器</h2><p>四个输入J K R（reset） Clock </p><p>两个输出 Q Qbar</p><table><thead><tr><th>J</th><th>K</th><th align="center">Q</th><th>Qbar</th></tr></thead><tbody><tr><td>0</td><td>0</td><td align="center">Q</td><td>Qbar</td></tr><tr><td>0</td><td>1</td><td align="center">0</td><td>1</td></tr><tr><td>1</td><td>0</td><td align="center">1</td><td>0</td></tr><tr><td>1</td><td>1</td><td align="center">Qbar</td><td>Q</td></tr></tbody></table><div class="highlight-container" data-rel="Vhdl"><figure class="iseeu highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">entity</span> JK_ff <span class="keyword">is</span></span><br><span class="line"><span class="keyword">port</span>(J,K: <span class="keyword">in</span> <span class="built_in">std_logic</span>;</span><br><span class="line">clock,reset: <span class="keyword">in</span> <span class="built_in">std_logic</span>;</span><br><span class="line">Q, Qbar: <span class="keyword">out</span> <span class="built_in">std_logic</span>);</span><br><span class="line"><span class="keyword">end</span> JK_ff;</span><br><span class="line"><span class="keyword">architecture</span> behav <span class="keyword">of</span> JK_ff <span class="keyword">is</span></span><br><span class="line"><span class="keyword">signal</span> state:<span class="built_in">std_logic</span>;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">process</span>( clock, reset) <span class="keyword">is</span></span><br><span class="line">     <span class="keyword">variable</span> jk: <span class="built_in">std_logic_vector</span>(<span class="number">1</span> <span class="keyword">downto</span> <span class="number">0</span>); </span><br><span class="line">      <span class="keyword">begin</span></span><br><span class="line">           jk:=J&amp;K;</span><br><span class="line">           <span class="keyword">if</span>  (reset=‘<span class="number">0</span>’) <span class="keyword">then</span> state&lt;=‘<span class="number">0</span>’;</span><br><span class="line">            <span class="keyword">elsif</span>  rising_edge(clock) <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">case</span> jk <span class="keyword">is</span></span><br><span class="line">        <span class="keyword">when</span> “<span class="number">11</span>”=&gt; state&lt;=<span class="keyword">not</span> state;</span><br><span class="line">        <span class="keyword">when</span> “<span class="number">10</span>”=&gt; state&lt;=‘<span class="number">1</span>’;</span><br><span class="line">        <span class="keyword">when</span> “<span class="number">01</span>”=&gt; state&lt;=‘<span class="number">0</span>’;</span><br><span class="line">        <span class="keyword">when</span> <span class="keyword">others</span>  =&gt; <span class="keyword">null</span>;  </span><br><span class="line">        <span class="keyword">end</span> <span class="keyword">case</span>;</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">process</span>;</span><br><span class="line">      Q&lt;=state;</span><br><span class="line">      Qbar&lt;=<span class="keyword">not</span> state ;</span><br><span class="line"><span class="keyword">end</span>  behav</span><br></pre></td></tr></table></figure></div><p>**CASE语句要完整,所以在CASE JK的时候要加<br>when others &#x3D;&gt;null;</p><h2 id="T触发器"><a href="#T触发器" class="headerlink" title="T触发器"></a>T触发器</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202302151611179.png"                      alt="image.png"                ></p><div class="highlight-container" data-rel="Vhdl"><figure class="iseeu highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Entity</span> T_FF <span class="keyword">is</span></span><br><span class="line">     <span class="keyword">port</span> ( T, clock, reset : <span class="keyword">in</span>  <span class="built_in">std_logic</span> ;</span><br><span class="line">               Q, Qbar : <span class="keyword">out</span>  <span class="built_in">std_logic</span> );</span><br><span class="line"><span class="keyword">End</span> T_FF;</span><br><span class="line"><span class="keyword">Architecture</span>  behav  <span class="keyword">of</span>   T_FF  <span class="keyword">is</span></span><br><span class="line"><span class="keyword">Begin</span></span><br><span class="line">      <span class="keyword">process</span>(clock, reset)</span><br><span class="line">           <span class="keyword">variable</span>  state:  <span class="built_in">std_logic</span> ;     </span><br><span class="line">      <span class="keyword">begin</span> </span><br><span class="line">          <span class="keyword">if</span>  (reset =‘<span class="number">0</span>’)  <span class="keyword">then</span> state:=‘<span class="number">0</span>’;</span><br><span class="line">          <span class="keyword">elsif</span>  rising_edge(clock) <span class="keyword">then</span></span><br><span class="line">               <span class="keyword">if</span>   T=‘<span class="number">1</span>’<span class="keyword">then</span> </span><br><span class="line">                     state := <span class="keyword">not</span> state;</span><br><span class="line">                <span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line">            <span class="keyword">end</span> <span class="keyword">if</span> ;</span><br><span class="line">            Q&lt;=state;</span><br><span class="line">            Qbar&lt;= <span class="keyword">not</span> state;</span><br><span class="line">       <span class="keyword">end</span> <span class="keyword">process</span>;</span><br><span class="line"><span class="keyword">End</span>  behav ; </span><br><span class="line"></span><br></pre></td></tr></table></figure></div><h1 id="寄存器的设计"><a href="#寄存器的设计" class="headerlink" title="寄存器的设计"></a>寄存器的设计</h1><p>一个D触发器就是一个寄存器，多位可以由多个D触发器构成</p><div class="highlight-container" data-rel="Vhdl"><figure class="iseeu highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Entity</span> reg  <span class="keyword">is</span></span><br><span class="line">      <span class="keyword">generic</span>( n: <span class="built_in">natural</span> :=<span class="number">4</span> );                            <span class="comment">--实体类属中的常数</span></span><br><span class="line">        <span class="keyword">port</span> (  D: <span class="keyword">in</span> <span class="built_in">std_logic_vector</span>(n-<span class="number">1</span> <span class="keyword">downto</span> <span class="number">0</span>);</span><br><span class="line">                 clock, reset : <span class="keyword">in</span> <span class="built_in">std_logic</span>;</span><br><span class="line">                 Q: <span class="keyword">out</span> <span class="built_in">std_logic_vector</span> (n-<span class="number">1</span> <span class="keyword">downto</span> <span class="number">0</span>) );</span><br><span class="line"><span class="keyword">End</span> reg ;</span><br><span class="line"><span class="keyword">Architecture</span> behav <span class="keyword">of</span> reg <span class="keyword">is</span></span><br><span class="line"><span class="keyword">Begin</span></span><br><span class="line">     <span class="keyword">process</span>(clock, reset)</span><br><span class="line">     <span class="keyword">begin</span></span><br><span class="line">         <span class="keyword">if</span> (reset=‘<span class="number">0</span>’)  <span class="keyword">then</span> Q&lt;=( <span class="keyword">others</span>=&gt;‘<span class="number">0</span>’);       <span class="comment">--表示Q赋全‘0’  </span></span><br><span class="line">         <span class="keyword">elsif</span> rising_edge(clock) <span class="keyword">then</span> </span><br><span class="line">             Q&lt;=D;</span><br><span class="line">         <span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line">       <span class="keyword">end</span> <span class="keyword">process</span>;</span><br><span class="line"><span class="keyword">End</span>  behav ;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><h2 id="移位寄存器"><a href="#移位寄存器" class="headerlink" title="移位寄存器"></a>移位寄存器</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202302151614295.png"                      alt="image.png"                ></p><div class="highlight-container" data-rel="Vhdl"><figure class="iseeu highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Entity</span>   sipo <span class="keyword">is</span></span><br><span class="line">       <span class="keyword">generic</span>( n : <span class="built_in">natural</span> :=<span class="number">8</span>);</span><br><span class="line">       <span class="keyword">port</span> ( a : <span class="keyword">in</span> <span class="built_in">std_logic</span> ;</span><br><span class="line">                 q: <span class="keyword">out</span> <span class="built_in">std_logic_vector</span>(n-<span class="number">1</span> <span class="keyword">downto</span> <span class="number">0</span>);</span><br><span class="line">                 clk : <span class="keyword">in</span> <span class="built_in">std_logic</span> );</span><br><span class="line"><span class="keyword">End</span> sipo;</span><br><span class="line"><span class="keyword">Architecture</span> behav <span class="keyword">of</span> sipo <span class="keyword">is</span></span><br><span class="line"><span class="keyword">Begin</span></span><br><span class="line">    <span class="keyword">process</span>(clk)</span><br><span class="line">        <span class="keyword">variable</span> reg : <span class="built_in">std_logic_vector</span>(n-<span class="number">1</span> <span class="keyword">downto</span> <span class="number">0</span>);</span><br><span class="line">     <span class="keyword">begin</span></span><br><span class="line">         <span class="keyword">if</span>  rising_edge(clk)  <span class="keyword">then</span></span><br><span class="line">              reg : = reg ( n-<span class="number">2</span> <span class="keyword">downto</span> <span class="number">0</span>) &amp; a ;   </span><br><span class="line">              <span class="comment">--左移移位寄存器；</span></span><br><span class="line">   <span class="comment">-- reg : = a &amp; reg (n-1 downto 1); 右移移位寄存器 </span></span><br><span class="line">          <span class="keyword">end</span> <span class="keyword">if</span> ;</span><br><span class="line">          q&lt;= reg ;</span><br><span class="line">    <span class="keyword">end</span>  <span class="keyword">process</span>;</span><br><span class="line"><span class="keyword">End</span>  behav;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><h1 id="计数器"><a href="#计数器" class="headerlink" title="计数器"></a>计数器</h1><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202302151618066.png"                                     ><br>用“+”函数描述</p><div class="highlight-container" data-rel="Vhdl"><figure class="iseeu highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Library</span> ieee ;</span><br><span class="line"><span class="keyword">Use</span> ieee.std_logic_1164.<span class="keyword">all</span>;</span><br><span class="line"><span class="keyword">Use</span> ieee.std_logic_unsigned.<span class="keyword">all</span>;</span><br><span class="line"><span class="keyword">Entity</span> counter <span class="keyword">is</span> </span><br><span class="line">     <span class="keyword">generic</span>( n: <span class="built_in">natural</span> :=<span class="number">4</span>);</span><br><span class="line">     <span class="keyword">port</span> ( clk : <span class="keyword">in</span> <span class="built_in">std_logic</span>;</span><br><span class="line">               reset : <span class="keyword">in</span> <span class="built_in">std_logic</span> ;</span><br><span class="line">               count : <span class="keyword">out</span> <span class="built_in">std_logic_vector</span>(n-<span class="number">1</span> <span class="keyword">downto</span> <span class="number">0</span>) );</span><br><span class="line"><span class="keyword">End</span> counter;</span><br><span class="line"><span class="keyword">architecture</span> ripple <span class="keyword">of</span> counter <span class="keyword">is</span> </span><br><span class="line">        <span class="keyword">component</span> T_FF <span class="keyword">is</span> </span><br><span class="line">            <span class="keyword">port</span>( T: <span class="keyword">in</span> <span class="built_in">std_logic</span> ;</span><br><span class="line">                     clk:<span class="keyword">in</span> <span class="built_in">std_logic</span>;</span><br><span class="line">      reset:<span class="keyword">in</span> <span class="built_in">std_logic</span>;</span><br><span class="line">                    Q : <span class="keyword">out</span> <span class="built_in">std_logic</span>;</span><br><span class="line">    Qbar:<span class="keyword">out</span> <span class="built_in">std_logic</span>);</span><br><span class="line">        <span class="keyword">end</span> <span class="keyword">component</span> ;                     <span class="comment">--将前面描述好的T触发器定义为元件；</span></span><br><span class="line">        <span class="keyword">signal</span> carry: <span class="built_in">std_logic_vector</span>( n <span class="keyword">downto</span> <span class="number">0</span>);</span><br><span class="line"><span class="keyword">Begin</span></span><br><span class="line">       carry(<span class="number">0</span>)&lt;=clk;</span><br><span class="line">       g0: <span class="keyword">for</span>  i <span class="keyword">in</span> <span class="number">0</span>  <span class="keyword">to</span> n-<span class="number">1</span>  <span class="keyword">generate</span>      <span class="comment">--循环</span></span><br><span class="line">             T1: T_FF <span class="keyword">port</span> <span class="keyword">map</span> ( ‘<span class="number">1</span>’, carry( i ), reset, count( i ), carry( i+<span class="number">1</span> ) );</span><br><span class="line">        <span class="keyword">end</span> <span class="keyword">generate</span> g0;</span><br><span class="line"><span class="keyword">End</span> ripple ;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202302151627535.png"                      alt="image.png"                ></p><p>波形仿真：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202302151628781.png"                      alt="image.png"                ></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202302151630092.png"                      alt="image.png"                ></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="VHDL 学习" scheme="http://example.com/tags/VHDL-%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>VHDL第三章组合逻辑电路</title>
    <link href="http://example.com/2023/02/15/VHDL%E7%AC%AC%E4%B8%89%E7%AB%A0%E7%BB%84%E5%90%88%E9%80%BB%E8%BE%91%E7%94%B5%E8%B7%AF/"/>
    <id>http://example.com/2023/02/15/VHDL%E7%AC%AC%E4%B8%89%E7%AB%A0%E7%BB%84%E5%90%88%E9%80%BB%E8%BE%91%E7%94%B5%E8%B7%AF/</id>
    <published>2023-02-15T08:34:19.000Z</published>
    <updated>2023-02-15T08:35:26.934Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>数字电路按照完成逻辑功能的不同特点，</p><blockquote><pre><code>组合逻辑电路 </code></pre><p>任意时刻的输出仅仅取决于该时刻的输入，与电路原来的状态无关<br>            电路没有记忆功能<br>            电路结构上不存在反馈路径  </p></blockquote><p>常见的有简单门电路，选择器，译码器，三态门</p><blockquote><pre><code>时序逻辑电路</code></pre><p>任意时刻的输出不仅取决于当时的输入信号，而且还取决于电路原来的状态，或者说，还与以前的输入有关。</p></blockquote><h1 id="设计方法"><a href="#设计方法" class="headerlink" title="设计方法"></a>设计方法</h1><p>使用可编程逻辑器件，用硬件语言描述的EDA设计方法<br>（1）逻辑问题的描述。将设计问题转化为一个逻辑问题<br>（2）根据逻辑问题，用硬件描述语言进行描述<br>（3）对描述进行综合，仿真测试<br>（4）生成最终网表，下载到芯片</p><h1 id="描述方法"><a href="#描述方法" class="headerlink" title="描述方法"></a>描述方法</h1><ul><li>数据流描述： 并行语句</li><li>结构 ：组件和互连</li><li>行为(时序)：顺序语句<ul><li>寄存器 状态机 指令解码</li></ul></li></ul><p>VHDL 数据流设计风格可以变成 VHDL 代码，反之不可行</p><ul><li>并行信号赋值（&lt;&#x3D;)</li><li>条件并行信号赋值（when -else)</li><li>选择并行信号赋值（with-select-when）</li><li>for generate</li></ul><p>注意优先级 <code>y &lt;= (a and b) or (c and d) ;</code><br>同一个信号不能出现在并行赋值语句的两边 也就是&lt;&#x3D;</p><h1 id="门电路"><a href="#门电路" class="headerlink" title="门电路"></a>门电路</h1><p>四种基本操作：与，或，非，，触发器操作，<br>以与非门为例</p><div class="highlight-container" data-rel="Vhdl"><figure class="iseeu highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">library</span> ieee;</span><br><span class="line"><span class="keyword">use</span> ieee.std_logic_1164.<span class="keyword">all</span>;</span><br><span class="line"><span class="keyword">entity</span> nand2 <span class="keyword">is</span></span><br><span class="line"><span class="keyword">port</span> (a,b: <span class="keyword">in</span> <span class="built_in">std_logic</span>;</span><br><span class="line">y: <span class="keyword">out</span> <span class="built_in">std_logic</span>);</span><br><span class="line"><span class="keyword">end</span> nand2;</span><br><span class="line"><span class="keyword">architecture</span> behav <span class="keyword">of</span> nand2 <span class="keyword">is</span></span><br><span class="line"><span class="keyword">begin</span> </span><br><span class="line">y &lt;= a <span class="keyword">nand</span> b;</span><br><span class="line"><span class="keyword">end</span> behav;</span><br><span class="line"><span class="comment">-- 如果吧nand变为nor就是或非</span></span><br></pre></td></tr></table></figure></div><h1 id="译码器"><a href="#译码器" class="headerlink" title="译码器"></a>译码器</h1><p>输入为二进制代码，输出是一组高低电平信号<br>变量<del>码制变换</del>显示译码~ 地址译码~</p><p>以3-8译码器为例<br>3个输入端 abc,。 g1,g2a,g2b为选择信号当g1 &#x3D;’1’, ‘0’’0’为例，正常工作</p><div class="highlight-container" data-rel="Vhdl"><figure class="iseeu highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">library</span> ieee;</span><br><span class="line"><span class="keyword">use</span> ieee.std_logic_1164.<span class="keyword">all</span>;</span><br><span class="line"><span class="keyword">entity</span> decoder <span class="keyword">is</span></span><br><span class="line"><span class="keyword">port</span> (a,b,c,g1,g2a,g2b: <span class="keyword">in</span> <span class="built_in">std_logic</span>;</span><br><span class="line">y: <span class="keyword">out</span> <span class="built_in">std_logic_vector</span>(<span class="number">7</span> <span class="keyword">downto</span> <span class="number">0</span>);</span><br><span class="line"><span class="keyword">end</span> decoder;</span><br><span class="line"><span class="keyword">architecture</span> behav <span class="keyword">of</span> decoder <span class="keyword">is</span></span><br><span class="line"><span class="keyword">signal</span> indata: <span class="built_in">std_logic_vector</span>(<span class="number">2</span> <span class="keyword">downto</span> <span class="number">0</span>);</span><br><span class="line"><span class="keyword">begin</span> </span><br><span class="line">indata &lt;= c&amp;b&amp;a;</span><br><span class="line"><span class="keyword">process</span>(indata,g1,g2a,g2b)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">if</span> (g1=<span class="string">&#x27;1&#x27;</span> <span class="keyword">and</span> g2a = <span class="string">&#x27;0&#x27;</span><span class="keyword">and</span> g2b = <span class="string">&#x27;0&#x27;</span>) <span class="keyword">then</span></span><br><span class="line"><span class="keyword">case</span> indata <span class="keyword">is</span> </span><br><span class="line"><span class="keyword">when</span> <span class="string">&quot;000&quot;</span> =&gt; y &lt;=<span class="string">&quot;11111110&quot;</span>;</span><br><span class="line"><span class="keyword">when</span> /....</span><br><span class="line">....</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">case</span>;</span><br><span class="line"><span class="keyword">else</span> y&lt;= <span class="string">&quot;11111111&quot;</span>;</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">process</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span> behav;</span><br></pre></td></tr></table></figure></div><h1 id="编码器"><a href="#编码器" class="headerlink" title="编码器"></a>编码器</h1><p>它的输入是一组高低电平信号，输出是一组二进制代码<br>优先级编码器<br>74ls148<br>3位二进制码输出的优先级编码<br>当有多个输入时，有优先级</p><div class="highlight-container" data-rel="Vhdl"><figure class="iseeu highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Library</span> IEEE;</span><br><span class="line"><span class="keyword">Use</span> IEEE.std_logic_1164.<span class="keyword">all</span>;</span><br><span class="line"><span class="keyword">Entity</span> priorityencoder  <span class="keyword">is</span></span><br><span class="line">    <span class="keyword">Port</span> ( input : <span class="keyword">in</span> <span class="built_in">std_logic_vector</span> (<span class="number">7</span> <span class="keyword">downto</span> <span class="number">0</span> );</span><br><span class="line">              y: <span class="keyword">out</span> <span class="built_in">std_logic_vector</span>( <span class="number">2</span> <span class="keyword">downto</span> <span class="number">0</span>) );</span><br><span class="line"><span class="keyword">End</span> priorityencoder;</span><br><span class="line"><span class="keyword">Architecture</span> behav <span class="keyword">of</span>  priorityencoder <span class="keyword">is</span></span><br><span class="line"><span class="keyword">Begin</span></span><br><span class="line">      <span class="keyword">Process</span>(input)</span><br><span class="line">      <span class="keyword">Begin</span></span><br><span class="line">      <span class="keyword">If</span> ( input(<span class="number">0</span>)=‘<span class="number">0</span>’) <span class="keyword">then</span>    y&lt;=“<span class="number">111</span>”;</span><br><span class="line">          <span class="keyword">elsif</span>  ( input(<span class="number">1</span>)=‘<span class="number">0</span>’) <span class="keyword">then</span>  y&lt;=“<span class="number">110</span>”;</span><br><span class="line">          <span class="keyword">elsif</span>  ( input(<span class="number">2</span>)=‘<span class="number">0</span>’) <span class="keyword">then</span>  y&lt;=“<span class="number">101</span>”;</span><br><span class="line">          <span class="keyword">elsif</span>  ( input(<span class="number">3</span>)=‘<span class="number">0</span>’) <span class="keyword">then</span>  y&lt;=“<span class="number">100</span>”;</span><br><span class="line">          <span class="keyword">elsif</span>  ( input(<span class="number">4</span>)=‘<span class="number">0</span>’) <span class="keyword">then</span>  y&lt;=“<span class="number">011</span>”;</span><br><span class="line">          <span class="keyword">elsif</span>  ( input(<span class="number">5</span>)=‘<span class="number">0</span>’) <span class="keyword">then</span>  y&lt;=“<span class="number">010</span>”;</span><br><span class="line">          <span class="keyword">elsif</span>  ( input(<span class="number">6</span>)=‘<span class="number">0</span>’) <span class="keyword">then</span>  y&lt;=“<span class="number">001</span>”;</span><br><span class="line">          <span class="keyword">elsif</span>  ( input(<span class="number">7</span>)=‘<span class="number">0</span>’) <span class="keyword">then</span>  y&lt;=“<span class="number">000</span>”;</span><br><span class="line">          <span class="keyword">else</span> y&lt;=“XXX”;</span><br><span class="line">          <span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line">    <span class="keyword">End</span> <span class="keyword">process</span>;</span><br><span class="line"><span class="keyword">End</span> behav;</span><br></pre></td></tr></table></figure></div><p>#值得一看</p><h1 id="加法器"><a href="#加法器" class="headerlink" title="加法器"></a>加法器</h1><p>半加 全加（有进位）<br>前者两个输入，两个输出<br>后者三个输入，两个输出</p><div class="highlight-container" data-rel="Vhdl"><figure class="iseeu highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">LIBRARY</span> ieee;</span><br><span class="line"><span class="keyword">USE</span> ieee.std_logic_1164.<span class="keyword">all</span>;</span><br><span class="line"><span class="keyword">ENTITY</span> full_add <span class="keyword">IS</span></span><br><span class="line"><span class="keyword">PORT</span> ( X,Y,Z:<span class="keyword">in</span> <span class="built_in">bit</span>;</span><br><span class="line">Sum,Carry:<span class="keyword">out</span> <span class="built_in">bit</span>);</span><br><span class="line"><span class="keyword">END</span> full_add;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ARCHITECTURE</span> a <span class="keyword">OF</span> full_add <span class="keyword">IS</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">   Sum &lt;= X <span class="keyword">xor</span> Y <span class="keyword">xor</span> Z;</span><br><span class="line">   Carry&lt;=(X <span class="keyword">and</span> Y) <span class="keyword">or</span> (Y <span class="keyword">and</span> Z) <span class="keyword">or</span> (Z <span class="keyword">and</span> X);</span><br><span class="line"><span class="keyword">END</span> a; </span><br><span class="line"><span class="comment">-- 对于这些操作可以看真值表</span></span><br></pre></td></tr></table></figure></div><p>#模块化处理</p><div class="highlight-container" data-rel="Vhdl"><figure class="iseeu highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">library</span> ieee;</span><br><span class="line"><span class="keyword">use</span> ieee.std_logic_1164.<span class="keyword">all</span></span><br><span class="line"><span class="keyword">package</span> components <span class="keyword">is</span></span><br><span class="line">COMPONENTS fadd <span class="keyword">is</span></span><br><span class="line"><span class="keyword">port</span>(a,b,ci: <span class="keyword">in</span> <span class="built_in">std_logic</span>;</span><br><span class="line">co,sum:<span class="keyword">out</span> <span class="built_in">std_logic</span>);</span><br><span class="line"><span class="keyword">end</span> fadd;</span><br><span class="line"><span class="keyword">end</span> components;</span><br></pre></td></tr></table></figure></div><h1 id="三态门"><a href="#三态门" class="headerlink" title="三态门"></a>三态门</h1><div class="highlight-container" data-rel="Vhdl"><figure class="iseeu highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Library</span> IEEE;</span><br><span class="line"><span class="keyword">Use</span> IEEE.std_logic_1164.<span class="keyword">all</span>;</span><br><span class="line"><span class="keyword">Entity</span> tri_gate <span class="keyword">is</span></span><br><span class="line">    <span class="keyword">port</span> ( din , en : <span class="keyword">in</span> <span class="built_in">std_logic</span>;</span><br><span class="line">              dout : <span class="keyword">out</span> <span class="built_in">std_logic</span> );</span><br><span class="line"><span class="keyword">End</span> tri_gate ;</span><br><span class="line"><span class="keyword">Architecture</span> behav <span class="keyword">of</span> tri_gate  <span class="keyword">is</span></span><br><span class="line"><span class="keyword">Begin</span></span><br><span class="line">      <span class="keyword">process</span> ( din ,en)</span><br><span class="line">      <span class="keyword">begin</span></span><br><span class="line">            <span class="keyword">if</span> (en=‘<span class="number">1</span>’) <span class="keyword">then</span> dout&lt;=din;</span><br><span class="line">            <span class="keyword">else</span> dout&lt;=‘Z’;</span><br><span class="line">            <span class="keyword">end</span> <span class="keyword">if</span> ;</span><br><span class="line">       <span class="keyword">end</span> <span class="keyword">process</span>; </span><br><span class="line"><span class="keyword">End</span> behav;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><h1 id="缓冲器"><a href="#缓冲器" class="headerlink" title="缓冲器"></a>缓冲器</h1><p>缓冲寄存器，在总线传输中起<strong>数据暂存缓冲</strong><br>输入缓冲，输出缓冲<br>单向与双向之分</p><div class="highlight-container" data-rel="Vhdl"><figure class="iseeu highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Library</span> IEEE;</span><br><span class="line"><span class="keyword">Use</span> IEEE.std_logic_1164.<span class="keyword">all</span>;</span><br><span class="line"><span class="keyword">Entity</span> tri_bigate  <span class="keyword">is</span></span><br><span class="line">    <span class="keyword">port</span> ( a , b: <span class="keyword">inout</span>  <span class="built_in">std_logic_vector</span>(<span class="number">7</span> <span class="keyword">downto</span> <span class="number">0</span>) ;</span><br><span class="line">              en , dr : <span class="keyword">in</span> <span class="built_in">std_logic</span> );</span><br><span class="line"><span class="keyword">End</span> tri_bigate ;</span><br><span class="line"><span class="keyword">Architecture</span> behav <span class="keyword">of</span> tri_bigate  <span class="keyword">is</span></span><br><span class="line">     <span class="keyword">signal</span> aout , bout :<span class="built_in">std_logic_vector</span> ( <span class="number">7</span> <span class="keyword">downto</span> <span class="number">0</span> );</span><br><span class="line"><span class="keyword">Begin</span></span><br><span class="line">      <span class="keyword">process</span> ( a , dr , en)</span><br><span class="line">      <span class="keyword">begin</span></span><br><span class="line">            <span class="keyword">if</span> ( (en=‘<span class="number">0</span>’) <span class="keyword">and</span> ( dr=‘<span class="number">1</span>’) )   <span class="keyword">then</span></span><br><span class="line">                   bout&lt;=a;</span><br><span class="line">            <span class="keyword">else</span> bout&lt;=“ZZZZZZZZ”;</span><br><span class="line">            <span class="keyword">end</span> <span class="keyword">if</span> ;</span><br><span class="line">            b&lt;=bout ;</span><br><span class="line">       <span class="keyword">end</span> <span class="keyword">process</span>;</span><br><span class="line">     <span class="keyword">process</span> ( b , dr , en)</span><br><span class="line">      <span class="keyword">begin</span></span><br><span class="line">            <span class="keyword">if</span> ( (en=‘<span class="number">0</span>’) <span class="keyword">and</span> ( dr=‘<span class="number">0</span>’) )   <span class="keyword">then</span></span><br><span class="line">                   aout&lt;=b;</span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">                   aout&lt;=“ZZZZZZZZ”;</span><br><span class="line">            <span class="keyword">end</span> <span class="keyword">if</span> ;</span><br><span class="line">            a&lt;=aout ;</span><br><span class="line">       <span class="keyword">end</span> <span class="keyword">process</span>; </span><br><span class="line"><span class="keyword">End</span> behav;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="VHDL 学习" scheme="http://example.com/tags/VHDL-%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>VHDL第二章语法基础</title>
    <link href="http://example.com/2023/02/15/VHDL%E7%AC%AC%E4%BA%8C%E7%AB%A0%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/"/>
    <id>http://example.com/2023/02/15/VHDL%E7%AC%AC%E4%BA%8C%E7%AB%A0%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/</id>
    <published>2023-02-15T08:33:03.000Z</published>
    <updated>2023-02-15T08:33:51.125Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Very-High-Speed Integrated circuit Hardware Description  Language</p><p>用途</p><blockquote><p>主要用于描述字系统的结构、行为、功能和接口<br>VHDL侧重于系统描述，更适合系统级设计</p></blockquote><hr><p>具有 硬件特征，并且是并行执行方式</p><h1 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a><font color = Pink>基本结构</font></h1><ul><li>库的调用       ——相当于操作系统中的目录</li><li>程序包的调用 —— 类似于include</li><li>实体说明—— 用于说明设计系统的外部接口信息</li><li>结构体 —— 描述行为</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202302121138527.png"                                     ></p><h1 id="VHDL的主要构件"><a href="#VHDL的主要构件" class="headerlink" title="VHDL的主要构件"></a>VHDL的主要构件</h1><ul><li><strong>基本构件</strong>：库、包、配置、实体、结构体、块、子程序（函数以及过程）</li><li><strong>主要构件</strong>：库 程序包 实体 结构体<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span> (hello)</span><br></pre></td></tr></table></figure></div></li></ul><h2 id="库："><a href="#库：" class="headerlink" title="库："></a>库：</h2><blockquote><p> <code>LIBRARY +　库名</code><br> 库(Library)是编译后数据的集合，是存放预先完成的程序包和数据集合体的仓库。<br> 　std库 IEEE库，work库（默认库）。面向asic的库，哈hi有自定义的库</p></blockquote><div class="highlight-container" data-rel="Vhdl"><figure class="iseeu highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">LIBRARY</span> IEEE;</span><br><span class="line"><span class="keyword">USE</span> IEEE.std_logic_1164.<span class="keyword">ALL</span>;;</span><br><span class="line"><span class="keyword">USE</span> IEEE.std_logic_unsigned.<span class="keyword">ALL</span>;</span><br></pre></td></tr></table></figure></div><p>一般使用的是IEEE库，有四个常用的程序包</p><ol><li>std_logic_1164</li><li>std_logic_arith</li><li>std_logic_signed </li><li>std_logic_unsigned<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202302121155541.png"                      alt="image.png"                ></li></ol><h2 id="包"><a href="#包" class="headerlink" title="包"></a>包</h2><div class="highlight-container" data-rel="Vhdl"><figure class="iseeu highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USE</span> IEEE.STD_LOGIC_1164.<span class="keyword">ALL</span></span><br></pre></td></tr></table></figure></div><p>不同的包，一样的语句会产生不同的形式的结果</p><h2 id="实体"><a href="#实体" class="headerlink" title="实体"></a>实体</h2><p>包括实体名，类属参数说明，端口说明<br>由”ENTITY” 引导</p><div class="highlight-container" data-rel="Vhdl"><figure class="iseeu highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ENTITY</span> 实体名 <span class="keyword">IS</span></span><br><span class="line">[类属参数说明]；</span><br><span class="line">[端口说明]；</span><br><span class="line"><span class="keyword">END</span> [<span class="keyword">ENTITY</span>] [实体名]；</span><br></pre></td></tr></table></figure></div><p>以END  ENTITY 结尾</p><ol><li>类属参数说明 说明静态信息<br>&#96;GENERIC (常数名：数据类型: &#x3D;设定值)<div class="highlight-container" data-rel="Vhdl"><figure class="iseeu highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GENERIC</span>(m:<span class="built_in">time</span>:= <span class="number">1</span>ns);</span><br></pre></td></tr></table></figure></div></li><li>端口说明<br>提供外部接口信息<br><code>PORT (端口名：端口方向 数据类型）</code><div class="highlight-container" data-rel="Vhdl"><figure class="iseeu highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">PORT</span>(d0:<span class="keyword">IN</span> <span class="built_in">std_logic</span>)</span><br></pre></td></tr></table></figure></div></li></ol><p>例子<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://raw.githubusercontent.com/h-yy-bag/hexo_imgs/main/imgs/202302121210874.png"                      alt="image.png"                ></p><h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2><p>ARCHITECTURE 设计实体的具体描述，指明具体行为，两部分  <strong>定义说明</strong>和<strong>具体功能描述</strong></p><div class="highlight-container" data-rel="Vhdl"><figure class="iseeu highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ARCHITECTURE</span> 结构体 <span class="keyword">OF</span> 实体名 <span class="keyword">IS</span></span><br><span class="line">[定义语句] 信号 (<span class="keyword">signal</span>);</span><br><span class="line">常数 (<span class="keyword">constant</span>);</span><br><span class="line">数据类型(<span class="keyword">type</span>);</span><br><span class="line">函数(<span class="keyword">function</span>);</span><br><span class="line">原件(<span class="keyword">component</span>);</span><br><span class="line"><span class="keyword">BEGIN</span> </span><br><span class="line">[并行处理语句]；</span><br><span class="line"><span class="keyword">END</span>  结构体名；</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p>语句并行<br>结构体的描述方法：<br><font color=pink size =4> 行为描述、数据流描述、结构描述</font><br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://raw.githubusercontent.com/h-yy-bag/hexo_imgs/main/imgs/202302121242674.png"                      alt="image.png"                ></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>描述层与层之间的连接关系和实体和结构体之间的连接关系</p><div class="highlight-container" data-rel="Vhdl"><figure class="iseeu highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CONFIGURATION</span> 配置名 <span class="keyword">OF</span> 实体名 <span class="keyword">IS</span></span><br><span class="line">[语句说明];</span><br><span class="line"><span class="keyword">END</span> 配置名;</span><br></pre></td></tr></table></figure></div><p>作用：<br>利用配置语句来选择不同的结构体</p><h1 id="数据类型以及运算符"><a href="#数据类型以及运算符" class="headerlink" title="数据类型以及运算符"></a>数据类型以及运算符</h1><h2 id="10种标准数据类型"><a href="#10种标准数据类型" class="headerlink" title="10种标准数据类型"></a><strong>10种标准数据类型</strong></h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://raw.githubusercontent.com/h-yy-bag/hexo_imgs/main/imgs/202302121251679.png"                      alt="image.png"                ><br>还有用途<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://raw.githubusercontent.com/h-yy-bag/hexo_imgs/main/imgs/202302121252475.png"                      alt="image.png"                ></p><p>还由用户自定义的数据类型</p><div class="highlight-container" data-rel="Vhdl"><figure class="iseeu highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">TYPE</span> 数据类型名 <span class="keyword">IS</span> 数据类型定义 <span class="keyword">OF</span> 基本数据类型</span><br><span class="line"></span><br><span class="line">或 <span class="keyword">TYPE</span> 数据类型名 <span class="keyword">IS</span> 数据类型定义</span><br></pre></td></tr></table></figure></div><p>常用的有 枚举类型， 子类型 整数类型和实数类型</p><div class="highlight-container" data-rel="Vhdl"><figure class="iseeu highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">TYPE</span> week <span class="keyword">IS</span> (sum, mon, tue, wed, thu, tri, sat); <span class="comment">--枚举类型</span></span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="Vhdl"><figure class="iseeu highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SUBTYPE</span> <span class="built_in">natural</span> <span class="keyword">IS</span> <span class="built_in">integer</span> <span class="keyword">range</span> <span class="number">0</span> <span class="keyword">to</span> <span class="built_in">integer</span>’high</span><br><span class="line"><span class="comment">--子类型</span></span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="Vhdl"><figure class="iseeu highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">TYPE</span> percent <span class="keyword">IS</span> <span class="built_in">INTEGER</span> <span class="keyword">RANGE</span> -<span class="number">100</span> <span class="keyword">TO</span> <span class="number">100</span></span><br><span class="line"><span class="comment">-- 整数类型和实数类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">TYPE</span> 数组名 <span class="keyword">IS</span> <span class="keyword">ARRAY</span>(数组范围) <span class="keyword">OF</span> 数组类型；</span><br><span class="line">数组类型</span><br><span class="line"></span><br><span class="line"><span class="keyword">TYPE</span> 记录类型名 <span class="keyword">IS</span> <span class="keyword">RECORD</span> </span><br><span class="line">元素名：元素数据类型；</span><br><span class="line">元素名: 元素数据类型：</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">RECORD</span>;</span><br><span class="line"><span class="comment">-- 记录类型</span></span><br></pre></td></tr></table></figure></div><hr><h2 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h2><p>std_logic_1164:</p><ul><li>TO_STDLOGICVECTOR(A) –&gt; 由 BIT_VECTOR 转换为<br>STD_LOGIC_VECTOR</li><li>TO_BITVECTOR(A) –&gt;BIT转到bitvector()</li><li>TO_STDLOGIC(A)  –&gt;由BIT转 换STD_LOGIC</li><li>TOBIT(A)</li></ul><p>std_logic_arich:</p><ul><li>CONV_STD_LOGIC_VECTOR(A,n)(n为位长)  integer unsigned signed 转换为std_logic_vector</li><li>CONV_INTEGER(A)  unsigned signed 转换为integer</li></ul><p>std_logic_unsigned:</p><ul><li>conv_integer(A)   ,std_logic_vector转换为integer</li></ul><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://raw.githubusercontent.com/h-yy-bag/hexo_imgs/main/imgs/202302121556646.png"                      alt="image.png"                ></p><h1 id="数据对象"><a href="#数据对象" class="headerlink" title="数据对象"></a>数据对象</h1><p>可以赋值的都叫做 对象</p><ol><li>常量：设计中不变的值  </li><li>变量 ： 定义在进程中或子程序种的变化量</li><li>对应硬件内部实实在在的连线</li></ol><div class="highlight-container" data-rel="Vhdl"><figure class="iseeu highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CONSTANT</span> 常数名：数据类型：=表达式 </span><br><span class="line"></span><br><span class="line"><span class="keyword">CONSTANT</span> fbus:<span class="built_in">bit_vector</span>:=“<span class="number">0101</span>”</span><br><span class="line"></span><br><span class="line"><span class="comment">--总线上的数据向量</span></span><br></pre></td></tr></table></figure></div><p>全局的量</p><div class="highlight-container" data-rel="Vhdl"><figure class="iseeu highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">VARIABLE</span> 变量名：数据类型:= 初始值</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">VARIABLE</span> <span class="built_in">time</span>:<span class="built_in">integer</span> <span class="keyword">RANGE</span> <span class="number">0</span> <span class="keyword">TO</span> <span class="number">6</span> <span class="comment">--进程中代表次数的变化</span></span><br></pre></td></tr></table></figure></div><p>局部量<br>对变量的赋值是立即生效的</p><div class="highlight-container" data-rel="Vhdl"><figure class="iseeu highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SIGNAL</span> 信号名:数据类型:=表达式</span><br></pre></td></tr></table></figure></div><p>“:&#x3D;”表示对信号的赋初值，一般不产生延时。<br>“&lt;&#x3D;”表示信号的代入赋值，有延时。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://raw.githubusercontent.com/h-yy-bag/hexo_imgs/main/imgs/202302121625968.png"                      alt="image.png"                ></p><blockquote><p>信号赋值有延迟；而变量赋值没有延迟。</p><p>进程对信号敏感，对变量不敏感。信号可以是多个进程的全局信<br>号, 而变量只在定义它的进程中可见</p><p>在描述中，信号的赋值不会立即生效，而是要等待一个delta延迟后才会变化，否则该信号的值在delta延迟之前仍是原来的值。</p></blockquote><p>变量存储临时数据 保存中间结果(：&#x3D; ）赋值立即发生，进程内有效<br>常量用于保存静态数据<br>信号有延时（&lt;&#x3D;) 跨进程</p><h1 id="基本语句"><a href="#基本语句" class="headerlink" title="基本语句"></a>基本语句</h1><p>具有顺序和并行语句（特点<br>顺序语句需要用process进行封装<br>“–”表示注释</p><h2 id="并行语句"><a href="#并行语句" class="headerlink" title="并行语句"></a>并行语句</h2><p>包括7种语句</p><ol><li>赋值语句</li><li>条件赋值语句、</li><li>选择信号赋值语句、</li><li>进程语句</li><li>元件例化语句</li><li>生成语句</li><li>子程序调用语句</li></ol><h3 id="赋值语句"><a href="#赋值语句" class="headerlink" title="赋值语句"></a>赋值语句</h3><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://raw.githubusercontent.com/h-yy-bag/hexo_imgs/main/imgs/202302121634515.png"                      alt="image.png"                ></p><p>信号  &lt;&#x3D;<br>变量和常量 :&#x3D;</p><h3 id="条件赋值语句"><a href="#条件赋值语句" class="headerlink" title="条件赋值语句"></a>条件赋值语句</h3><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://raw.githubusercontent.com/h-yy-bag/hexo_imgs/main/imgs/202302121637768.png"                      alt="image.png"                ><br>a &lt;&#x3D; 表达式1 when 条件 else<br>        表达式2 when 条件 else<br>        …<br>        表达式n；</p><p><strong>只有最后一句需要分号</strong></p><h3 id="选择信号赋值"><a href="#选择信号赋值" class="headerlink" title="选择信号赋值"></a>选择信号赋值</h3><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://raw.githubusercontent.com/h-yy-bag/hexo_imgs/main/imgs/202302121641926.png"                      alt="image.png"                ><br>逗号和分号的作用情况<br>with instrution select<br>a &lt;&#x3D; b when  “100”,<br>…<br>‘Z’ when others;</p><h3 id="进程语句"><a href="#进程语句" class="headerlink" title="进程语句"></a>进程语句</h3><p>process本身就是一个并行语句，内部是顺序语句<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://raw.githubusercontent.com/h-yy-bag/hexo_imgs/main/imgs/202302121646948.png"                      alt="image.png"                ><br>    启动方式有两种：敏感参数以及wait语句</p><p>敏感参数： process(参数)  只要参数一变化，process就会启动</p><p>wait语句：<br>process<br>begin<br>    output &lt;&#x3D; in1 OR in2;<br>    wait on in1,in2;<br>END PROCESS;</p><p>等待in1, in2信号发生变化，进程再次执行</p><blockquote><p><strong>进程的启动只能是信号</strong><br>敏感参数以及wait 语句不能混用<br>当一个进程执行结束后，先挂起来，直到有新的启动信号变化为止</p></blockquote><h3 id="元件例化语句"><a href="#元件例化语句" class="headerlink" title="元件例化语句"></a>元件例化语句</h3><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://raw.githubusercontent.com/h-yy-bag/hexo_imgs/main/imgs/202302121656792.png"                      alt="image.png"                ><br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://raw.githubusercontent.com/h-yy-bag/hexo_imgs/main/imgs/202302121702400.png"                      alt="image.png"                ></p><h3 id="生成语句"><a href="#生成语句" class="headerlink" title="生成语句"></a>生成语句</h3><p>有IF 和FOR来控制的<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://raw.githubusercontent.com/h-yy-bag/hexo_imgs/main/imgs/202302121704257.png"                      alt="image.png"                ></p><h3 id="子程序调用语句"><a href="#子程序调用语句" class="headerlink" title="子程序调用语句"></a>子程序调用语句</h3><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://raw.githubusercontent.com/h-yy-bag/hexo_imgs/main/imgs/202302121706519.png"                      alt="image.png"                ><br>子程序调用 ：过程调用语句和函数调用</p><h2 id="顺序语句"><a href="#顺序语句" class="headerlink" title="顺序语句"></a>顺序语句</h2><ol><li><p>IF语句  可以和 when else 互换</p><div class="highlight-container" data-rel="Vhdl"><figure class="iseeu highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">IF</span> reset=‘<span class="number">0</span>’ <span class="keyword">THEN</span> q&lt;=‘<span class="number">0</span>’;</span><br><span class="line"><span class="keyword">ELSIF</span> ‘clk’ event <span class="keyword">AND</span> clk=‘<span class="number">1</span>’ <span class="keyword">THEN</span> q&lt;=d; </span><br><span class="line"><span class="keyword">END</span> <span class="keyword">IF</span>;</span><br></pre></td></tr></table></figure></div></li><li><p>CASE语句  可以和 with else语句互换</p><div class="highlight-container" data-rel="Vhdl"><figure class="iseeu highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CASE</span> sel <span class="keyword">IS</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WHEN</span> <span class="number">0</span>=&gt; y&lt;=d0；</span><br><span class="line"></span><br><span class="line"><span class="keyword">WHEN</span> <span class="number">1</span>=&gt; y&lt;=d1；</span><br><span class="line"></span><br><span class="line"><span class="keyword">WHEN</span> <span class="keyword">OTHERS</span>&lt;=<span class="keyword">NULL</span>;</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">CASE</span></span><br></pre></td></tr></table></figure></div></li><li><p>LOOP语句</p></li><li><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://raw.githubusercontent.com/h-yy-bag/hexo_imgs/main/imgs/202302121715226.png"                      alt="image.png"                ></p></li><li><p>EXIT 和 NEXT语句（loop内部的循环控制语句）</p></li></ol><p>其他顺序语句</p><blockquote><p>wait语句<br>wait on 信号表<br>wait until 条件表达式<br>wait for 时间表达式</p></blockquote><blockquote><p>返回语句RETURN<br>仅用于子程序</p></blockquote><blockquote><p>空操作语句NULL<br>常用于CASE语句中</p></blockquote><h1 id="属性描述语句"><a href="#属性描述语句" class="headerlink" title="属性描述语句"></a>属性描述语句</h1><p>具有属性的项目有很多： 类型，子类型，过程，函数，信号，变量，常量，实体，结构体，配置，程序包，元件和语句标号等，属性是这些项目的特性</p><p><strong>预定义描述语句格式：属性对象’属性名</strong></p><h2 id="1-信号类属性"><a href="#1-信号类属性" class="headerlink" title="1.信号类属性"></a>1.信号类属性</h2><p>EVENT表示信号发生率动作，stable表示无事件发生</p><div class="highlight-container" data-rel="Vhdl"><figure class="iseeu highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">NOT</span> clock`STABLE <span class="keyword">AND</span> clock = <span class="string">&#x27;1&#x27;</span>; <span class="comment">--检测时钟上升沿</span></span><br><span class="line"></span><br><span class="line">clock`EVENT <span class="keyword">AND</span> clock=<span class="string">&#x27;1&#x27;</span>; <span class="comment">--检测时钟上升沿</span></span><br><span class="line">还有 s`delayed(<span class="built_in">time</span>)</span><br><span class="line">s<span class="symbol">&#x27;stable</span></span><br><span class="line">s<span class="symbol">&#x27;quiet</span>(<span class="built_in">time</span>)</span><br></pre></td></tr></table></figure></div><h2 id="2-数值区间类属性"><a href="#2-数值区间类属性" class="headerlink" title="2. 数值区间类属性"></a>2. 数值区间类属性</h2><p><strong>RANGE</strong>和<strong>REVERSE_RANGE</strong></p><h2 id="3-数值类属性"><a href="#3-数值类属性" class="headerlink" title="3. 数值类属性"></a>3. 数值类属性</h2><pre><code>.LEFT  &#39;RIGHT HIGH LOW之类</code></pre><h2 id="4-数组属性"><a href="#4-数组属性" class="headerlink" title="4. 数组属性"></a>4. 数组属性</h2><p>’LENGTH 对宽度进行获取</p><h2 id="5-用户自定义的属性"><a href="#5-用户自定义的属性" class="headerlink" title="5. 用户自定义的属性"></a>5. 用户自定义的属性</h2><p>ATTRIBUTE 属性名 OF 对象名：对象类型 IS 值</p><h1 id="其他构建"><a href="#其他构建" class="headerlink" title="其他构建"></a>其他构建</h1><ol><li><p>块是一种划分 ，不影响综合，将模块划分为数个区域</p></li><li><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://raw.githubusercontent.com/h-yy-bag/hexo_imgs/main/imgs/202302122018627.png"                      alt="image.png"                ></p></li><li><p>函数</p></li><li><p>&#96;&#96;&#96;</p></li></ol><p>  FUNCTION 函数名（参数表）RETURN 数据类型；<br>  FUNCTION 函数名（参数表）RETURN 数据类型 IS<br>  [说明部分]；<br>  [说明部分]；<br>  BEGIN<br>  顺序语句；<br>  END 函数名；</p><p>  &#96;&#96;&#96;</p><ol start="4"><li>过程<blockquote><p>PROCEDURE 和函数一样 两部分组成 过程首和过程体<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://raw.githubusercontent.com/h-yy-bag/hexo_imgs/main/imgs/202302122018715.png"                      alt="image.png"                ></p></blockquote></li></ol><blockquote><p>函数和过程都是顺序语句，并且不能说明信号<br>过程参数表一般要定义参量的流向模式，如果没有指定默认为IN<br>过程中可以有WAIT语句（但综合器一般不支持），函数中能<br>过程有多个返回值，函数只有一个</p></blockquote><p>还有<strong>程序包</strong><br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://raw.githubusercontent.com/h-yy-bag/hexo_imgs/main/imgs/202302122021452.png"                      alt="image.png"                ><br>示例：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://raw.githubusercontent.com/h-yy-bag/hexo_imgs/main/imgs/202302122022315.png"                      alt="image.png"                ></p><p>还有TEXTIO构件</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="VHDL 学习" scheme="http://example.com/tags/VHDL-%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>通原笔记_1（1至2章）</title>
    <link href="http://example.com/2023/01/24/%E9%80%9A%E5%8E%9F%E7%AC%94%E8%AE%B0-1/"/>
    <id>http://example.com/2023/01/24/%E9%80%9A%E5%8E%9F%E7%AC%94%E8%AE%B0-1/</id>
    <published>2023-01-24T15:42:26.000Z</published>
    <updated>2023-01-24T15:59:52.914Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>​最近愈发觉得在蹉跎时间，也稍微把游戏放一放，现在更能感受到人的“温度”，而不是打完游戏之后的一身虚无以及疲惫、无知。</p><p>选择<a class="link"   href="https://www.bilibili.com/video/BV1nE411E79G" >西安电子科技大学通信原理<i class="fa-solid fa-up-right-from-square"></i></a>观看，也把之前很多不懂的地方重新认识了一遍，借此文来记录笔记。</p><p><strong>第一章</strong></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202301242349288.jpg"                      alt="CRall_20230124_153838990"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202301242351621.jpg"                      alt="CRall_20230124_153849867"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202301242352676.jpg"                      alt="CRall_20230124_153911365"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202301242353578.jpg"                      alt="CRall_20230124_153920542"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202301242354211.jpg"                      alt="CRall_20230124_153932721"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202301242354575.jpg"                      alt="CRall_20230124_153942022"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202301242355731.jpg"                      alt="CRall_20230124_153950281"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202301242357435.jpg"                      alt="CRall_20230124_153959523"                ></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="通信原理 笔记" scheme="http://example.com/tags/%E9%80%9A%E4%BF%A1%E5%8E%9F%E7%90%86-%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>初晴</title>
    <link href="http://example.com/2023/01/14/%E5%88%9D%E6%99%B4/"/>
    <id>http://example.com/2023/01/14/%E5%88%9D%E6%99%B4/</id>
    <published>2023-01-14T15:45:42.000Z</published>
    <updated>2023-01-15T08:56:01.213Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>​      下了两天的小雨，地上，墙上都是湿漉漉的，没想到下午的开始放晴了。雨后初晴，天实在是很干净。就好像在一块蓝色的幕布上撒下了这些云彩一般，望向天空，注意力很难不被这些”小可爱”所吸引，看着它，仿佛有摄人心魄的能力，仿佛心也随之飘荡在蓝天之上没一下子就开阔起来。</p><img src = "https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202301142351106.jpg" ><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202301151639154.jpg"                      alt="8944bf23d4d1bbf684fc5e7870f6d80"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202301151640256.jpg"                      alt="7c27e41e89fe11bb9767a49981fb96d"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202301151640266.jpg"                      alt="664000565d3fb82f2b9e9e94f3b54ad"                ></p><p>这是附近的基站，从小时候便有了，距今好像也有近乎十年的历史了，仍然矗立在那，配上背后的云彩，便有了一种独特，我难以描述的美感。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202301151641959.jpg"                      alt="13951cead735fa0c885b65944d0bf5e"                ><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202301151641213.jpg"                      alt="66c71a862849dbdb5174848b4c1cb27"                ></p><p>这两张照片是在田地里拍摄的，当时的天空还有太阳在照着，但慢慢的，便被这片云藏了起来。站在广阔的田里，抬头便是这篇云，细看其中，有种漫威电影里的混沌的感觉，觉得颇为有趣</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="风景 感悟" scheme="http://example.com/tags/%E9%A3%8E%E6%99%AF-%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>勇气</title>
    <link href="http://example.com/2023/01/12/%E5%8B%87%E6%B0%94/"/>
    <id>http://example.com/2023/01/12/%E5%8B%87%E6%B0%94/</id>
    <published>2023-01-12T14:30:37.000Z</published>
    <updated>2023-01-13T16:08:38.320Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>​《被讨厌的勇气》 《月光落在左手上》</p><p>​今天又重拾起一本曾经读过的书，虽然读过，但只是浅浅的读了一遍，受益匪浅，但是对于现在的我来说仍然有很多未解之谜。最近这两年来，也发现自己有暴躁的倾向，内心也时常久久不能平静，便萌生了再读一遍的想法。至于第二本书，余秀华女士的诗歌，或许也能打开我的一扇新世界的大门。</p><p>​<strong>被讨厌的勇气</strong></p><blockquote><p>开篇的两句话便可见这本书对于很多人都有很大的作用</p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202301122242353.png"                      width=70%                ></blockquote><p>​<strong>月光落在左手上</strong></p><blockquote><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202301132325494.png"                      alt="image-20230113232505373"                ></p><p>诗的名字：我爱你，巴巴的活着，这何尝不是大部分人的写照呢，机械般的活着。把自己比喻作陈皮，在阳光下才能舒展开来，不同的茶叶便能带来心中的美好，平平淡淡的生活中，都有让自己开心的事物存在，但是诗人自身的不幸，痛苦在这个时候又将其拉回现实，这便是内心的雪。诗人表示自己并不会这么容易肝肠寸断，因为诗人把自己比作那稗子一样，长在稻谷周围，很相似，但是却并不是那稻子，只是一种极其不受欢迎的野草。诗人在庭院之中读着心爱之人的诗歌，以突然飞过的麻雀儿寓意时光的飞逝。稻子和稗子都渴望春天，但是稗子的渴望中又带着“提心吊胆”。一不小心便会失去。</p><p>就连耶稣用稗子设过比喻：“天国，好像人撒好种子在田里。有仇敌来，将稗子撒在麦子里，就走了。好种就是天国之子。稗子就是那恶者之子。撒稗子的仇敌就是魔鬼。收割的时候就是世界的末了。”<a class="link"   href="https://www.163.com/dy/article/FVDUI8A20545781Y.html" >Link<i class="fa-solid fa-up-right-from-square"></i></a></p><p>所以便有了：<strong>活为稗子，提心吊胆</strong>。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="被讨厌的勇气 读书 月光落在左手上" scheme="http://example.com/tags/%E8%A2%AB%E8%AE%A8%E5%8E%8C%E7%9A%84%E5%8B%87%E6%B0%94-%E8%AF%BB%E4%B9%A6-%E6%9C%88%E5%85%89%E8%90%BD%E5%9C%A8%E5%B7%A6%E6%89%8B%E4%B8%8A/"/>
    
  </entry>
  
  <entry>
    <title>Special page</title>
    <link href="http://example.com/2023/01/11/Special-page/"/>
    <id>http://example.com/2023/01/11/Special-page/</id>
    <published>2023-01-11T14:02:02.000Z</published>
    <updated>2023-01-15T09:01:59.315Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>For  Lady Shen，我最喜欢的人，当你看到这个网页，我想应该已经是比较晚的时候了，现在是2022年的11月18号，23点21分  </p><hr><p>​      <img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202301112154437.jpg"                      alt="2"                ></p><blockquote><p>先草率的看一下，以后想说的话，都会在这里的<br>喜欢你，每一天<br>爱你，每一天<br>晚安  </p><h2 id="现在是19号的0-14分"><a href="#现在是19号的0-14分" class="headerlink" title="现在是19号的0:14分  "></a>现在是19号的0:14分  </h2><p>可能我真的不适合谈恋爱吧，一边说喜欢，一边表现出来却又并没有像我所说的那么喜欢。或许这才是现在的我吧。  </p></blockquote><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202301112155894.jpg"                      alt="p1"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202301112155999.jpg"                      alt="p2"                ></p><p>-&gt;  </p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202301112156959.jpg"                      alt="p3"                ></p><p>-&gt;  </p><p>   <img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202301112156696.jpg"                      alt="p4"                ></p><p>-&gt;<br>   <img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202301112156712.jpg"                      alt="p5"                ></p><p>-&gt;<br>   <img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202301112156942.jpg"                      alt="p6"                ></p><p>-&gt;<br>   <img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202301112156372.jpg"                      alt="p7"                ></p><p>-&gt;<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202301112157171.jpg"                      alt="p8"                ><br>可能真的到结尾了吧。</p><hr><p><em>The story never ends</em><br>hahaha，并没有到结尾，因为才刚刚开始，好多事还没来得及去说，还没有牵过手，还没有一起去看过电影，去逛过公园，还没有去到以后的以后<br>所以，哪有那么容易结束呢，以前都没有想过会像现在这样有着另一个人的陪伴和关心，我越去思考，越会觉得不可思议，从相遇到现在的相恋，或许每一步都是注定的吧，是一份来自上天的礼物，奖励我单身20年的一份礼物。  </p><blockquote><p>又到了假期，现在的假期长了许多，多了一个月，但同时也多了许多未完成的考试，有好的方面也有坏的方面，但是又如何呢，人嘛，还是要懂得趋利避害的，对事情分析要冷静<br>需要明白自己做的事是为了什么，有“<strong>勇气</strong>”去进行下一步的动作，这里的勇气二字，主要来源于《被讨厌的勇气》，我拜读过一遍，当时如饥似渴的读，只懂了很浅的表面，现在也该开启新的篇章了<br>再去读一遍，把书读薄，也该把《撒哈拉的故事》读一遍，体会到荷西与三毛的那份感情，三毛对于生活的态度。尝试让自己丰富起来  </p></blockquote><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202301112157037.jpg"                      alt="purple_cloud"                ></p><blockquote><h2 id="“总有一阵风会吹过我再吹过你，总有一个瞬间我们之间的距离是零”-————————我们需要的"><a href="#“总有一阵风会吹过我再吹过你，总有一个瞬间我们之间的距离是零”-————————我们需要的" class="headerlink" title="“总有一阵风会吹过我再吹过你，总有一个瞬间我们之间的距离是零”　　　　　————————我们需要的"></a>“<strong>总有一阵风会吹过我再吹过你，总有一个瞬间我们之间的距离是零</strong>”　　　　　————————我们需要的</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202301112157695.jpg"                      alt="2022_12_11_1"                ><br>“<strong>眼睛为她下着雨，心里却为她打着伞，这就是爱情</strong>” 　　　　　　　————————　泰戈尔</p></blockquote><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202301112157984.jpg"                      alt="2022_12_11_2"                ><br>“其实最棒的回忆就在当下，在眼前，而且这会是人生最美好的时光”　　　　　　————————偷影子的人　　<br> <img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202301112157355.jpg"                      alt="2022_12_11_4"                ></p><p>最近这几天觉得真的好开心呀，真的到了一个新的阶段，相互关心，相互需要，相互依偎，更应该珍惜现在的美好事物，不过最近也有点情绪波动就是说，玩游戏玩得多容易被干扰，关键的还是我的心灵好像逐渐贫瘠了，变得干涸起来了，没有书的涵养，腹有诗书气自华是真实存在的，多读书，改变自己的想法，也尝试去做的更好。（2022-12-11 23:19）<br> <img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.jsdelivr.net/gh/h-yy-bag/hexo_imgs/202301112158415.jpg"                      alt="2022_12_11_3"                ></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>test</title>
    <link href="http://example.com/2023/01/05/test/"/>
    <id>http://example.com/2023/01/05/test/</id>
    <published>2023-01-05T08:38:09.000Z</published>
    <updated>2023-01-05T08:48:07.445Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>hello, my beloved lady.小申</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>test_my_site</title>
    <link href="http://example.com/2023/01/05/test-my-site/"/>
    <id>http://example.com/2023/01/05/test-my-site/</id>
    <published>2023-01-04T16:20:22.000Z</published>
    <updated>2023-01-04T16:20:22.662Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
</feed>
